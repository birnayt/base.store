/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */


type Maybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
};










type File = Node & {
  sourceInstanceName: Scalars['String'];
  absolutePath: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  size: Scalars['Int'];
  prettySize: Scalars['String'];
  modifiedTime: Scalars['Date'];
  accessTime: Scalars['Date'];
  changeTime: Scalars['Date'];
  birthTime: Scalars['Date'];
  root: Scalars['String'];
  dir: Scalars['String'];
  base: Scalars['String'];
  ext: Scalars['String'];
  name: Scalars['String'];
  relativeDirectory: Scalars['String'];
  dev: Scalars['Int'];
  mode: Scalars['Int'];
  nlink: Scalars['Int'];
  uid: Scalars['Int'];
  gid: Scalars['Int'];
  rdev: Scalars['Int'];
  ino: Scalars['Float'];
  atimeMs: Scalars['Float'];
  mtimeMs: Scalars['Float'];
  ctimeMs: Scalars['Float'];
  atime: Scalars['Date'];
  mtime: Scalars['Date'];
  ctime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  birthtimeMs: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type FileModifiedTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileAccessTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileChangeTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileBirthTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileAtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileMtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type FileCtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

/** Node Interface */
type Node = {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type Internal = {
  content: Maybe<Scalars['String']>;
  contentDigest: Scalars['String'];
  description: Maybe<Scalars['String']>;
  fieldOwners: Maybe<Array<Maybe<Scalars['String']>>>;
  ignoreType: Maybe<Scalars['Boolean']>;
  mediaType: Maybe<Scalars['String']>;
  owner: Scalars['String'];
  type: Scalars['String'];
};


type Directory = Node & {
  sourceInstanceName: Scalars['String'];
  absolutePath: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  size: Scalars['Int'];
  prettySize: Scalars['String'];
  modifiedTime: Scalars['Date'];
  accessTime: Scalars['Date'];
  changeTime: Scalars['Date'];
  birthTime: Scalars['Date'];
  root: Scalars['String'];
  dir: Scalars['String'];
  base: Scalars['String'];
  ext: Scalars['String'];
  name: Scalars['String'];
  relativeDirectory: Scalars['String'];
  dev: Scalars['Int'];
  mode: Scalars['Int'];
  nlink: Scalars['Int'];
  uid: Scalars['Int'];
  gid: Scalars['Int'];
  rdev: Scalars['Int'];
  ino: Scalars['Float'];
  atimeMs: Scalars['Float'];
  mtimeMs: Scalars['Float'];
  ctimeMs: Scalars['Float'];
  atime: Scalars['Date'];
  mtime: Scalars['Date'];
  ctime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  birthtimeMs: Maybe<Scalars['Float']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type DirectoryModifiedTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryAccessTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryChangeTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryBirthTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryAtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryMtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type DirectoryCtimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type Site = Node & {
  buildTime: Maybe<Scalars['Date']>;
  siteMetadata: Maybe<SiteSiteMetadata>;
  port: Maybe<Scalars['Int']>;
  host: Maybe<Scalars['String']>;
  flags: Maybe<SiteFlags>;
  polyfill: Maybe<Scalars['Boolean']>;
  pathPrefix: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type SiteBuildTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type SiteFlags = {
  DEV_SSR: Maybe<Scalars['Boolean']>;
  FAST_DEV: Maybe<Scalars['Boolean']>;
  LMDB_STORE: Maybe<Scalars['Boolean']>;
  PARALLEL_SOURCING: Maybe<Scalars['Boolean']>;
  PARALLEL_QUERY_RUNNING: Maybe<Scalars['Boolean']>;
  PRESERVE_FILE_DOWNLOAD_CACHE: Maybe<Scalars['Boolean']>;
};

type SiteSiteMetadata = {
  title: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  titleTemplate: Maybe<Scalars['String']>;
  author: Maybe<Scalars['String']>;
  siteUrl: Maybe<Scalars['String']>;
};

type SiteFunction = Node & {
  functionRoute: Scalars['String'];
  pluginName: Scalars['String'];
  originalAbsoluteFilePath: Scalars['String'];
  originalRelativeFilePath: Scalars['String'];
  relativeCompiledFilePath: Scalars['String'];
  absoluteCompiledFilePath: Scalars['String'];
  matchPath: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type SitePage = Node & {
  path: Scalars['String'];
  component: Scalars['String'];
  internalComponentName: Scalars['String'];
  componentChunkName: Scalars['String'];
  matchPath: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  isCreatedByStatefulCreatePages: Maybe<Scalars['Boolean']>;
  context: Maybe<SitePageContext>;
  pluginCreator: Maybe<SitePlugin>;
  pluginCreatorId: Maybe<Scalars['String']>;
};

type SitePageContext = {
  id: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  _xparams: Maybe<SitePageContext_Xparams>;
};

type SitePageContext_Xparams = {
  slug: Maybe<Scalars['String']>;
};

type PrismicAlternateLanguageType = {
  id: Maybe<Scalars['ID']>;
  uid: Maybe<Scalars['String']>;
  lang: Maybe<Scalars['String']>;
  type: Maybe<Scalars['String']>;
  document: Maybe<PrismicAllDocumentTypes>;
  raw: Maybe<Scalars['JSON']>;
};


type PrismicEmbedType = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type PrismicGeoPointType = {
  longitude: Scalars['Float'];
  latitude: Scalars['Float'];
};

type PrismicImageDimensionsType = {
  width: Scalars['Int'];
  height: Scalars['Int'];
};

type PrismicImageThumbnailType = {
  alt: Maybe<Scalars['String']>;
  copyright: Maybe<Scalars['String']>;
  dimensions: Maybe<PrismicImageDimensionsType>;
  /** A plain imgix URL with the URL and params applied. */
  url: Maybe<Scalars['String']>;
  /** Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information. */
  fixed: Maybe<ImgixFixed>;
  /** Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information. */
  fluid: Maybe<ImgixFluid>;
  gatsbyImageData: Maybe<Scalars['JSON']>;
  localFile: Maybe<File>;
};


type PrismicImageThumbnailTypeUrlArgs = {
  imgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicImageThumbnailTypeFixedArgs = {
  width?: Maybe<Scalars['Int']>;
  height: Maybe<Scalars['Int']>;
  quality: Maybe<Scalars['Int']>;
  imgixParams?: Maybe<ImgixParamsInput>;
  placeholderImgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicImageThumbnailTypeFluidArgs = {
  imgixParams?: Maybe<ImgixParamsInput>;
  maxWidth?: Maybe<Scalars['Int']>;
  maxHeight: Maybe<Scalars['Int']>;
  srcSetBreakpoints: Maybe<Array<Maybe<Scalars['Int']>>>;
  placeholderImgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicImageThumbnailTypeGatsbyImageDataArgs = {
  layout: Maybe<GatsbyImageLayout>;
  width: Maybe<Scalars['Int']>;
  height: Maybe<Scalars['Int']>;
  aspectRatio: Maybe<Scalars['Float']>;
  outputPixelDensities: Maybe<Array<Maybe<Scalars['Float']>>>;
  breakpoints: Maybe<Array<Maybe<Scalars['Int']>>>;
  sizes: Maybe<Scalars['String']>;
  backgroundColor: Maybe<Scalars['String']>;
  imgixParams: Maybe<ImgixParamsInput>;
  placeholderImgixParams: Maybe<ImgixParamsInput>;
  placeholder: Maybe<ImgixPlaceholder>;
  widthTolerance?: Maybe<Scalars['Float']>;
  srcSetMinWidth?: Maybe<Scalars['Int']>;
  srcSetMaxWidth?: Maybe<Scalars['Int']>;
};

type GatsbyImageLayout =
  | 'FIXED'
  | 'FULL_WIDTH'
  | 'CONSTRAINED';

type PrismicLinkType = {
  link_type: Maybe<PrismicLinkTypeEnum>;
  isBroken: Maybe<Scalars['Boolean']>;
  url: Maybe<Scalars['String']>;
  target: Maybe<Scalars['String']>;
  size: Maybe<Scalars['Int']>;
  id: Maybe<Scalars['ID']>;
  type: Maybe<Scalars['String']>;
  tags: Maybe<Array<Maybe<Scalars['String']>>>;
  lang: Maybe<Scalars['String']>;
  slug: Maybe<Scalars['String']>;
  uid: Maybe<Scalars['String']>;
  document: Maybe<PrismicAllDocumentTypes>;
  localFile: Maybe<File>;
  raw: Maybe<Scalars['JSON']>;
};

type PrismicLinkTypeEnum =
  | 'Any'
  | 'Document'
  | 'Media'
  | 'Web';

type PrismicSliceType = {
  id: Scalars['ID'];
  slice_type: Scalars['String'];
  slice_label: Maybe<Scalars['String']>;
};

type PrismicStructuredTextType = {
  text: Maybe<Scalars['String']>;
  html: Maybe<Scalars['String']>;
  raw: Maybe<Scalars['JSON']>;
};

type PrismicTypePathType = Node & {
  path: Array<Scalars['String']>;
  type: Scalars['String'];
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type ImgixFixed = {
  base64: Scalars['String'];
  src: Scalars['String'];
  srcSet: Scalars['String'];
  srcWebp: Scalars['String'];
  srcSetWebp: Scalars['String'];
  sizes: Scalars['String'];
  width: Scalars['Int'];
  height: Scalars['Int'];
};

type ImgixFluid = {
  base64: Scalars['String'];
  src: Scalars['String'];
  srcSet: Scalars['String'];
  srcWebp: Scalars['String'];
  srcSetWebp: Scalars['String'];
  sizes: Scalars['String'];
  aspectRatio: Scalars['Float'];
};

type ImgixPlaceholder =
  | 'DOMINANT_COLOR'
  | 'BLURRED'
  | 'NONE';

type ImgixParamsInput = {
  /** Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar). */
  ar: Maybe<Scalars['String']>;
  /** Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto). */
  auto: Maybe<Scalars['String']>;
  /** Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg). */
  bg: Maybe<Scalars['String']>;
  /** Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align). */
  blendAlign: Maybe<Scalars['String']>;
  /** Alias for `blendAlign`. */
  blendalign: Maybe<Scalars['String']>;
  /** Alias for `blendAlign`. */
  ba: Maybe<Scalars['String']>;
  /** Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha). */
  blendAlpha: Maybe<Scalars['Int']>;
  /** Alias for `blendAlpha`. */
  blendalpha: Maybe<Scalars['Int']>;
  /** Alias for `blendAlpha`. */
  balph: Maybe<Scalars['Int']>;
  /** Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color). */
  blendColor: Maybe<Scalars['String']>;
  /** Alias for `blendColor`. */
  blendcolor: Maybe<Scalars['String']>;
  /** Alias for `blendColor`. */
  blendClr: Maybe<Scalars['String']>;
  /** Alias for `blendColor`. */
  blendclr: Maybe<Scalars['String']>;
  /** Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop). */
  blendCrop: Maybe<Scalars['String']>;
  /** Alias for `blendCrop`. */
  blendcrop: Maybe<Scalars['String']>;
  /** Alias for `blendCrop`. */
  bc: Maybe<Scalars['String']>;
  /** Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit). */
  blendFit: Maybe<Scalars['String']>;
  /** Alias for `blendFit`. */
  blendfit: Maybe<Scalars['String']>;
  /** Alias for `blendFit`. */
  bf: Maybe<Scalars['String']>;
  /** Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h). */
  blendH: Maybe<Scalars['Float']>;
  /** Alias for `blendH`. */
  blendh: Maybe<Scalars['Float']>;
  /** Alias for `blendH`. */
  bh: Maybe<Scalars['Float']>;
  /** Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode). */
  blendMode: Maybe<Scalars['String']>;
  /** Alias for `blendMode`. */
  blendmode: Maybe<Scalars['String']>;
  /** Alias for `blendMode`. */
  bm: Maybe<Scalars['String']>;
  /** Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad). */
  blendPad: Maybe<Scalars['Int']>;
  /** Alias for `blendPad`. */
  blendpad: Maybe<Scalars['Int']>;
  /** Alias for `blendPad`. */
  bp: Maybe<Scalars['Int']>;
  /** Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size). */
  blendSize: Maybe<Scalars['String']>;
  /** Alias for `blendSize`. */
  blendsize: Maybe<Scalars['String']>;
  /** Alias for `blendSize`. */
  bs: Maybe<Scalars['String']>;
  /** Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w). */
  blendW: Maybe<Scalars['Float']>;
  /** Alias for `blendW`. */
  blendw: Maybe<Scalars['Float']>;
  /** Alias for `blendW`. */
  bw: Maybe<Scalars['Float']>;
  /** Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x). */
  blendX: Maybe<Scalars['Int']>;
  /** Alias for `blendX`. */
  blendx: Maybe<Scalars['Int']>;
  /** Alias for `blendX`. */
  bx: Maybe<Scalars['Int']>;
  /** Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y). */
  blendY: Maybe<Scalars['Int']>;
  /** Alias for `blendY`. */
  blendy: Maybe<Scalars['Int']>;
  /** Alias for `blendY`. */
  by: Maybe<Scalars['Int']>;
  /** Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend). */
  blend: Maybe<Scalars['String']>;
  /** Alias for `blend`. */
  b: Maybe<Scalars['String']>;
  /** Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur). */
  blur: Maybe<Scalars['Int']>;
  /** Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom). */
  borderBottom: Maybe<Scalars['Int']>;
  /** Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left). */
  borderLeft: Maybe<Scalars['Int']>;
  /** Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner). */
  borderRadiusInner: Maybe<Scalars['String']>;
  /** Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius). */
  borderRadius: Maybe<Scalars['String']>;
  /** Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right). */
  borderRight: Maybe<Scalars['Int']>;
  /** Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top). */
  borderTop: Maybe<Scalars['Int']>;
  /** Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border). */
  border: Maybe<Scalars['String']>;
  /** Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri). */
  bri: Maybe<Scalars['Int']>;
  /** Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch). */
  ch: Maybe<Scalars['String']>;
  /** Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub). */
  chromasub: Maybe<Scalars['Int']>;
  /** Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant). */
  colorquant: Maybe<Scalars['Int']>;
  /** Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors). */
  colors: Maybe<Scalars['Int']>;
  /** Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con). */
  con: Maybe<Scalars['Int']>;
  /** Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius). */
  cornerRadius: Maybe<Scalars['String']>;
  /** Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop). */
  crop: Maybe<Scalars['String']>;
  /** Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs). */
  cs: Maybe<Scalars['String']>;
  /** Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl). */
  dl: Maybe<Scalars['String']>;
  /** Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi). */
  dpi: Maybe<Scalars['Int']>;
  /** Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr). */
  dpr: Maybe<Scalars['Float']>;
  /** Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha). */
  duotoneAlpha: Maybe<Scalars['Int']>;
  /** Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone). */
  duotone: Maybe<Scalars['String']>;
  /** Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp). */
  exp: Maybe<Scalars['Int']>;
  /** A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires). */
  expires: Maybe<Scalars['String']>;
  /** Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex). */
  faceindex: Maybe<Scalars['Int']>;
  /** Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad). */
  facepad: Maybe<Scalars['Float']>;
  /** Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces). */
  faces: Maybe<Scalars['Int']>;
  /** Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color). */
  fillColor: Maybe<Scalars['String']>;
  /** Alias for `fillColor`. */
  fillcolor: Maybe<Scalars['String']>;
  /** Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill). */
  fill: Maybe<Scalars['String']>;
  /** Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit). */
  fit: Maybe<Scalars['String']>;
  /** Alias for `fit`. */
  f: Maybe<Scalars['String']>;
  /** Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip). */
  flip: Maybe<Scalars['String']>;
  /** Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm). */
  fm: Maybe<Scalars['String']>;
  /** Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug). */
  fpDebug: Maybe<Scalars['Boolean']>;
  /** Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x). */
  fpX: Maybe<Scalars['Float']>;
  /** Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y). */
  fpY: Maybe<Scalars['Float']>;
  /** Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z). */
  fpZ: Maybe<Scalars['Float']>;
  /** Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam). */
  gam: Maybe<Scalars['Int']>;
  /** Sets grid colors for the transparency checkerboard grid. */
  gridColors: Maybe<Scalars['String']>;
  /** Sets grid size for the transparency checkerboard grid. */
  gridSize: Maybe<Scalars['Int']>;
  /** Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h). */
  h: Maybe<Scalars['Float']>;
  /** Alias for `h`. */
  height: Maybe<Scalars['Float']>;
  /** Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high). */
  high: Maybe<Scalars['Int']>;
  /** Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn). */
  htn: Maybe<Scalars['Int']>;
  /** Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue). */
  hue: Maybe<Scalars['Int']>;
  /** Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert). */
  invert: Maybe<Scalars['Boolean']>;
  /** Alias for `invert`. */
  inv: Maybe<Scalars['Boolean']>;
  /** Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless). */
  lossless: Maybe<Scalars['Boolean']>;
  /** Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align). */
  markAlign: Maybe<Scalars['String']>;
  /** Alias for `markAlign`. */
  ma: Maybe<Scalars['String']>;
  /** Alias for `markAlign`. */
  markalign: Maybe<Scalars['String']>;
  /** Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha). */
  markAlpha: Maybe<Scalars['Int']>;
  /** Alias for `markAlpha`. */
  markalpha: Maybe<Scalars['Int']>;
  /** Alias for `markAlpha`. */
  malph: Maybe<Scalars['Int']>;
  /** Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base). */
  markBase: Maybe<Scalars['String']>;
  /** Alias for `markBase`. */
  mb: Maybe<Scalars['String']>;
  /** Alias for `markBase`. */
  markbase: Maybe<Scalars['String']>;
  /** Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit). */
  markFit: Maybe<Scalars['String']>;
  /** Alias for `markFit`. */
  mf: Maybe<Scalars['String']>;
  /** Alias for `markFit`. */
  markfit: Maybe<Scalars['String']>;
  /** Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h). */
  markH: Maybe<Scalars['Float']>;
  /** Alias for `markH`. */
  mh: Maybe<Scalars['Float']>;
  /** Alias for `markH`. */
  markh: Maybe<Scalars['Float']>;
  /** Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad). */
  markPad: Maybe<Scalars['Int']>;
  /** Alias for `markPad`. */
  mp: Maybe<Scalars['Int']>;
  /** Alias for `markPad`. */
  markpad: Maybe<Scalars['Int']>;
  /** Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot). */
  markRot: Maybe<Scalars['Float']>;
  /** Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale). */
  markScale: Maybe<Scalars['Int']>;
  /** Alias for `markScale`. */
  ms: Maybe<Scalars['Int']>;
  /** Alias for `markScale`. */
  markscale: Maybe<Scalars['Int']>;
  /** Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile). */
  markTile: Maybe<Scalars['String']>;
  /** Alias for `markTile`. */
  mtile: Maybe<Scalars['String']>;
  /** Alias for `markTile`. */
  marktile: Maybe<Scalars['String']>;
  /** Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w). */
  markW: Maybe<Scalars['Float']>;
  /** Alias for `markW`. */
  mw: Maybe<Scalars['Float']>;
  /** Alias for `markW`. */
  markw: Maybe<Scalars['Float']>;
  /** Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x). */
  markX: Maybe<Scalars['Int']>;
  /** Alias for `markX`. */
  mx: Maybe<Scalars['Int']>;
  /** Alias for `markX`. */
  markx: Maybe<Scalars['Int']>;
  /** Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y). */
  markY: Maybe<Scalars['Int']>;
  /** Alias for `markY`. */
  my: Maybe<Scalars['Int']>;
  /** Alias for `markY`. */
  marky: Maybe<Scalars['Int']>;
  /** Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark). */
  mark: Maybe<Scalars['String']>;
  /** Alias for `mark`. */
  m: Maybe<Scalars['String']>;
  /** Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg). */
  maskBg: Maybe<Scalars['String']>;
  /** Alias for `maskBg`. */
  maskbg: Maybe<Scalars['String']>;
  /** Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask). */
  mask: Maybe<Scalars['String']>;
  /** Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height). */
  maxH: Maybe<Scalars['Int']>;
  /** Alias for `maxH`. */
  maxHeight: Maybe<Scalars['Int']>;
  /** Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width). */
  maxW: Maybe<Scalars['Int']>;
  /** Alias for `maxW`. */
  maxWidth: Maybe<Scalars['Int']>;
  /** Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height). */
  minH: Maybe<Scalars['Int']>;
  /** Alias for `minH`. */
  minHeight: Maybe<Scalars['Int']>;
  /** Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width). */
  minW: Maybe<Scalars['Int']>;
  /** Alias for `minW`. */
  minWidth: Maybe<Scalars['Int']>;
  /** Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome). */
  monochrome: Maybe<Scalars['String']>;
  /** Alias for `monochrome`. */
  mono: Maybe<Scalars['String']>;
  /** Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr). */
  nr: Maybe<Scalars['Int']>;
  /** Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs). */
  nrs: Maybe<Scalars['Int']>;
  /** Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient). */
  orient: Maybe<Scalars['Int']>;
  /** Alias for `orient`. */
  or: Maybe<Scalars['Int']>;
  /** Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom). */
  padBottom: Maybe<Scalars['Int']>;
  /** Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left). */
  padLeft: Maybe<Scalars['Int']>;
  /** Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right). */
  padRight: Maybe<Scalars['Int']>;
  /** Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top). */
  padTop: Maybe<Scalars['Int']>;
  /** Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad). */
  pad: Maybe<Scalars['Int']>;
  /** Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page). */
  page: Maybe<Scalars['Int']>;
  /** Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette). */
  palette: Maybe<Scalars['String']>;
  /** Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation). */
  pdfAnnotation: Maybe<Scalars['Boolean']>;
  /** Alias for `pdfAnnotation`. */
  annotation: Maybe<Scalars['Boolean']>;
  /** Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix). */
  prefix: Maybe<Scalars['String']>;
  /** Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px). */
  px: Maybe<Scalars['Int']>;
  /** Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q). */
  q: Maybe<Scalars['Int']>;
  /** Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect). */
  rect: Maybe<Scalars['String']>;
  /** Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot). */
  rot: Maybe<Scalars['Float']>;
  /** Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat). */
  sat: Maybe<Scalars['Int']>;
  /** Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia). */
  sepia: Maybe<Scalars['Int']>;
  /** Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad). */
  shad: Maybe<Scalars['Float']>;
  /** Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp). */
  sharp: Maybe<Scalars['Float']>;
  /** Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency). */
  transparency: Maybe<Scalars['String']>;
  /** Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color). */
  trimColor: Maybe<Scalars['String']>;
  /** Alias for `trimColor`. */
  trimcolor: Maybe<Scalars['String']>;
  /** Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md). */
  trimMd: Maybe<Scalars['Float']>;
  /** Alias for `trimMd`. */
  trimmd: Maybe<Scalars['Float']>;
  /** Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad). */
  trimPad: Maybe<Scalars['Int']>;
  /** Alias for `trimPad`. */
  trimpad: Maybe<Scalars['Int']>;
  /** Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd). */
  trimSd: Maybe<Scalars['Float']>;
  /** Alias for `trimSd`. */
  trimsd: Maybe<Scalars['Float']>;
  /** Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol). */
  trimTol: Maybe<Scalars['Float']>;
  /** Alias for `trimTol`. */
  trimtol: Maybe<Scalars['Float']>;
  /** Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim). */
  trim: Maybe<Scalars['String']>;
  /** Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align). */
  txtAlign: Maybe<Scalars['String']>;
  /** Alias for `txtAlign`. */
  txtalign: Maybe<Scalars['String']>;
  /** Alias for `txtAlign`. */
  ta: Maybe<Scalars['String']>;
  /** Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip). */
  txtClip: Maybe<Scalars['String']>;
  /** Alias for `txtClip`. */
  txtclip: Maybe<Scalars['String']>;
  /** Alias for `txtClip`. */
  tcl: Maybe<Scalars['String']>;
  /** Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color). */
  txtColor: Maybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  txtcolor: Maybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  txtClr: Maybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  txtclr: Maybe<Scalars['String']>;
  /** Alias for `txtColor`. */
  tc: Maybe<Scalars['String']>;
  /** Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit). */
  txtFit: Maybe<Scalars['String']>;
  /** Alias for `txtFit`. */
  txtfit: Maybe<Scalars['String']>;
  /** Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font). */
  txtFont: Maybe<Scalars['String']>;
  /** Alias for `txtFont`. */
  tf: Maybe<Scalars['String']>;
  /** Alias for `txtFont`. */
  txtfont: Maybe<Scalars['String']>;
  /** Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead). */
  txtLead: Maybe<Scalars['Int']>;
  /** Alias for `txtLead`. */
  txtlead: Maybe<Scalars['Int']>;
  /** Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig). */
  txtLig: Maybe<Scalars['Int']>;
  /** Alias for `txtLig`. */
  txtlig: Maybe<Scalars['Int']>;
  /** Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color). */
  txtLineColor: Maybe<Scalars['String']>;
  /** Alias for `txtLineColor`. */
  txtlinecolor: Maybe<Scalars['String']>;
  /** Alias for `txtLineColor`. */
  txtLineClr: Maybe<Scalars['String']>;
  /** Alias for `txtLineColor`. */
  txtlineclr: Maybe<Scalars['String']>;
  /** Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line). */
  txtLine: Maybe<Scalars['Int']>;
  /** Alias for `txtLine`. */
  txtline: Maybe<Scalars['Int']>;
  /** Alias for `txtLine`. */
  tl: Maybe<Scalars['Int']>;
  /** Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad). */
  txtPad: Maybe<Scalars['Int']>;
  /** Alias for `txtPad`. */
  txtpad: Maybe<Scalars['Int']>;
  /** Alias for `txtPad`. */
  tp: Maybe<Scalars['Int']>;
  /** Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad). */
  txtShad: Maybe<Scalars['Float']>;
  /** Alias for `txtShad`. */
  txtshad: Maybe<Scalars['Float']>;
  /** Alias for `txtShad`. */
  tsh: Maybe<Scalars['Float']>;
  /** Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size). */
  txtSize: Maybe<Scalars['Int']>;
  /** Alias for `txtSize`. */
  tsz: Maybe<Scalars['Int']>;
  /** Alias for `txtSize`. */
  txtsize: Maybe<Scalars['Int']>;
  /** Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track). */
  txtTrack: Maybe<Scalars['Int']>;
  /** Alias for `txtTrack`. */
  txttrack: Maybe<Scalars['Int']>;
  /** Alias for `txtTrack`. */
  tt: Maybe<Scalars['Int']>;
  /** Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width). */
  txtWidth: Maybe<Scalars['Int']>;
  /** Alias for `txtWidth`. */
  txtwidth: Maybe<Scalars['Int']>;
  /** Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt). */
  txt: Maybe<Scalars['String']>;
  /** Alias for `txt`. */
  t: Maybe<Scalars['String']>;
  /** Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm). */
  usm: Maybe<Scalars['Int']>;
  /** Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad). */
  usmrad: Maybe<Scalars['Float']>;
  /** Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib). */
  vib: Maybe<Scalars['Int']>;
  /** Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w). */
  w: Maybe<Scalars['Float']>;
  /** Alias for `w`. */
  width: Maybe<Scalars['Float']>;
};

type PrismicHomeDataBodyCarouselItemsItemsImageThumbnailsType = {
  desktop: Maybe<PrismicImageThumbnailType>;
};

type PrismicHomeDataBodyCarouselItemsItemsImageType = {
  alt: Maybe<Scalars['String']>;
  copyright: Maybe<Scalars['String']>;
  dimensions: Maybe<PrismicImageDimensionsType>;
  /** A plain imgix URL with the URL and params applied. */
  url: Maybe<Scalars['String']>;
  /** Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information. */
  fixed: Maybe<ImgixFixed>;
  /** Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information. */
  fluid: Maybe<ImgixFluid>;
  gatsbyImageData: Maybe<Scalars['JSON']>;
  localFile: Maybe<File>;
  thumbnails: Maybe<PrismicHomeDataBodyCarouselItemsItemsImageThumbnailsType>;
};


type PrismicHomeDataBodyCarouselItemsItemsImageTypeUrlArgs = {
  imgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicHomeDataBodyCarouselItemsItemsImageTypeFixedArgs = {
  width?: Maybe<Scalars['Int']>;
  height: Maybe<Scalars['Int']>;
  quality: Maybe<Scalars['Int']>;
  imgixParams?: Maybe<ImgixParamsInput>;
  placeholderImgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicHomeDataBodyCarouselItemsItemsImageTypeFluidArgs = {
  imgixParams?: Maybe<ImgixParamsInput>;
  maxWidth?: Maybe<Scalars['Int']>;
  maxHeight: Maybe<Scalars['Int']>;
  srcSetBreakpoints: Maybe<Array<Maybe<Scalars['Int']>>>;
  placeholderImgixParams?: Maybe<ImgixParamsInput>;
};


type PrismicHomeDataBodyCarouselItemsItemsImageTypeGatsbyImageDataArgs = {
  layout: Maybe<GatsbyImageLayout>;
  width: Maybe<Scalars['Int']>;
  height: Maybe<Scalars['Int']>;
  aspectRatio: Maybe<Scalars['Float']>;
  outputPixelDensities: Maybe<Array<Maybe<Scalars['Float']>>>;
  breakpoints: Maybe<Array<Maybe<Scalars['Int']>>>;
  sizes: Maybe<Scalars['String']>;
  backgroundColor: Maybe<Scalars['String']>;
  imgixParams: Maybe<ImgixParamsInput>;
  placeholderImgixParams: Maybe<ImgixParamsInput>;
  placeholder: Maybe<ImgixPlaceholder>;
  widthTolerance?: Maybe<Scalars['Float']>;
  srcSetMinWidth?: Maybe<Scalars['Int']>;
  srcSetMaxWidth?: Maybe<Scalars['Int']>;
};

type PrismicHomeDataBodyCarouselItem = {
  items: Maybe<PrismicHomeDataBodyCarouselItemsItemsImageType>;
};

type PrismicHomeDataBodyCarouselPrimary = {
  display_arrows: Maybe<Scalars['Boolean']>;
  display_dots: Maybe<Scalars['Boolean']>;
  title: Maybe<PrismicStructuredTextType>;
};

type PrismicHomeDataBodyShelfPrimary = {
  collection: Maybe<Scalars['String']>;
  display_arrows: Maybe<Scalars['Boolean']>;
  display_dots: Maybe<Scalars['Boolean']>;
  title: Maybe<PrismicStructuredTextType>;
};

type PrismicHomeDataBodyCarousel = PrismicSliceType & {
  items: Maybe<Array<Maybe<PrismicHomeDataBodyCarouselItem>>>;
  primary: Maybe<PrismicHomeDataBodyCarouselPrimary>;
  id: Scalars['ID'];
  slice_type: Scalars['String'];
  slice_label: Maybe<Scalars['String']>;
};

type PrismicHomeDataBodyShelf = PrismicSliceType & {
  primary: Maybe<PrismicHomeDataBodyShelfPrimary>;
  id: Scalars['ID'];
  slice_type: Scalars['String'];
  slice_label: Maybe<Scalars['String']>;
};

type PrismicHomeDataBodySlicesType = PrismicHomeDataBodyCarousel | PrismicHomeDataBodyShelf;

type PrismicHomeDataType = {
  body: Maybe<Array<Maybe<PrismicHomeDataBodySlicesType>>>;
};

type PrismicHome = Node & {
  data: Maybe<PrismicHomeDataType>;
  dataRaw: Scalars['JSON'];
  prismicId: Scalars['ID'];
  alternate_languages: Array<PrismicAlternateLanguageType>;
  first_publication_date: Scalars['Date'];
  href: Scalars['String'];
  lang: Scalars['String'];
  last_publication_date: Scalars['Date'];
  tags: Array<Scalars['String']>;
  type: Scalars['String'];
  url: Maybe<Scalars['String']>;
  _previewable: Scalars['ID'];
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};


type PrismicHomeFirst_Publication_DateArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};


type PrismicHomeLast_Publication_DateArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};

type PrismicAllDocumentTypes = PrismicHome;

type StoreProductEdge = {
  node: StoreProduct;
  cursor: Scalars['String'];
};

type BrowserStoreProductConnection = {
  pageInfo: StorePageInfo;
  edges: Array<StoreProductEdge>;
};

type StoreCollectionEdge = {
  node: StoreCollection;
  cursor: Scalars['String'];
};

type BrowserStoreCollectionConnection = {
  pageInfo: StorePageInfo;
  edges: Array<StoreCollectionEdge>;
};

type StoreProductIdField =
  | 'id'
  | 'slug';

type StoreProductId = {
  field: StoreProductIdField;
  value: Scalars['ID'];
};

type StoreSort =
  | 'price_desc'
  | 'price_asc'
  | 'orders_desc'
  | 'name_desc'
  | 'name_asc'
  | 'release_desc'
  | 'discount_desc'
  | 'score_desc';

type StoreSelectedFacet = {
  key: Scalars['String'];
  value: Scalars['String'];
};

type StoreFacetType =
  | 'BOOLEAN'
  | 'RANGE';

type StoreSearchResult = {
  products: BrowserStoreProductConnection;
  facets: Array<StoreFacet>;
};

type Query = {
  product: StoreProduct;
  search: StoreSearchResult;
  allProducts: BrowserStoreProductConnection;
  allCollections: BrowserStoreCollectionConnection;
  file: Maybe<File>;
  allFile: FileConnection;
  directory: Maybe<Directory>;
  allDirectory: DirectoryConnection;
  site: Maybe<Site>;
  allSite: SiteConnection;
  siteFunction: Maybe<SiteFunction>;
  allSiteFunction: SiteFunctionConnection;
  sitePage: Maybe<SitePage>;
  allSitePage: SitePageConnection;
  prismicEmbedType: Maybe<PrismicEmbedType>;
  allPrismicEmbedType: PrismicEmbedTypeConnection;
  prismicTypePathType: Maybe<PrismicTypePathType>;
  allPrismicTypePathType: PrismicTypePathTypeConnection;
  prismicHome: Maybe<PrismicHome>;
  allPrismicHome: PrismicHomeConnection;
  storeCollection: Maybe<StoreCollection>;
  allStoreCollection: StoreCollectionConnection;
  storeProduct: Maybe<StoreProduct>;
  allStoreProduct: StoreProductConnection;
  sitePlugin: Maybe<SitePlugin>;
  allSitePlugin: SitePluginConnection;
  siteBuildMetadata: Maybe<SiteBuildMetadata>;
  allSiteBuildMetadata: SiteBuildMetadataConnection;
};


type QueryProductArgs = {
  locator: StoreProductId;
};


type QuerySearchArgs = {
  first: Scalars['Int'];
  after: Maybe<Scalars['String']>;
  sort?: Maybe<StoreSort>;
  term?: Maybe<Scalars['String']>;
  selectedFacets: Maybe<Array<StoreSelectedFacet>>;
};


type QueryAllProductsArgs = {
  first: Scalars['Int'];
  after: Maybe<Scalars['String']>;
};


type QueryAllCollectionsArgs = {
  first: Scalars['Int'];
  after: Maybe<Scalars['String']>;
};


type QueryFileArgs = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllFileArgs = {
  filter: Maybe<FileFilterInput>;
  sort: Maybe<FileSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryDirectoryArgs = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllDirectoryArgs = {
  filter: Maybe<DirectoryFilterInput>;
  sort: Maybe<DirectorySortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteArgs = {
  buildTime: Maybe<DateQueryOperatorInput>;
  siteMetadata: Maybe<SiteSiteMetadataFilterInput>;
  port: Maybe<IntQueryOperatorInput>;
  host: Maybe<StringQueryOperatorInput>;
  flags: Maybe<SiteFlagsFilterInput>;
  polyfill: Maybe<BooleanQueryOperatorInput>;
  pathPrefix: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllSiteArgs = {
  filter: Maybe<SiteFilterInput>;
  sort: Maybe<SiteSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteFunctionArgs = {
  functionRoute: Maybe<StringQueryOperatorInput>;
  pluginName: Maybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: Maybe<StringQueryOperatorInput>;
  originalRelativeFilePath: Maybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: Maybe<StringQueryOperatorInput>;
  absoluteCompiledFilePath: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllSiteFunctionArgs = {
  filter: Maybe<SiteFunctionFilterInput>;
  sort: Maybe<SiteFunctionSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySitePageArgs = {
  path: Maybe<StringQueryOperatorInput>;
  component: Maybe<StringQueryOperatorInput>;
  internalComponentName: Maybe<StringQueryOperatorInput>;
  componentChunkName: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  isCreatedByStatefulCreatePages: Maybe<BooleanQueryOperatorInput>;
  context: Maybe<SitePageContextFilterInput>;
  pluginCreator: Maybe<SitePluginFilterInput>;
  pluginCreatorId: Maybe<StringQueryOperatorInput>;
};


type QueryAllSitePageArgs = {
  filter: Maybe<SitePageFilterInput>;
  sort: Maybe<SitePageSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryPrismicEmbedTypeArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllPrismicEmbedTypeArgs = {
  filter: Maybe<PrismicEmbedTypeFilterInput>;
  sort: Maybe<PrismicEmbedTypeSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryPrismicTypePathTypeArgs = {
  path: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllPrismicTypePathTypeArgs = {
  filter: Maybe<PrismicTypePathTypeFilterInput>;
  sort: Maybe<PrismicTypePathTypeSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryPrismicHomeArgs = {
  dataRaw: Maybe<JsonQueryOperatorInput>;
  prismicId: Maybe<IdQueryOperatorInput>;
  alternate_languages: Maybe<PrismicAlternateLanguageTypeFilterListInput>;
  first_publication_date: Maybe<DateQueryOperatorInput>;
  href: Maybe<StringQueryOperatorInput>;
  lang: Maybe<StringQueryOperatorInput>;
  last_publication_date: Maybe<DateQueryOperatorInput>;
  tags: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
  url: Maybe<StringQueryOperatorInput>;
  _previewable: Maybe<IdQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllPrismicHomeArgs = {
  filter: Maybe<PrismicHomeFilterInput>;
  sort: Maybe<PrismicHomeSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryStoreCollectionArgs = {
  seo: Maybe<StoreSeoFilterInput>;
  breadcrumbList: Maybe<StoreBreadcrumbListFilterInput>;
  meta: Maybe<StoreCollectionMetaFilterInput>;
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  type: Maybe<StoreCollectionTypeQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  remoteId: Maybe<IdQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllStoreCollectionArgs = {
  filter: Maybe<StoreCollectionFilterInput>;
  sort: Maybe<StoreCollectionSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QueryStoreProductArgs = {
  seo: Maybe<StoreSeoFilterInput>;
  breadcrumbList: Maybe<StoreBreadcrumbListFilterInput>;
  slug: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  productID: Maybe<StringQueryOperatorInput>;
  brand: Maybe<StoreBrandFilterInput>;
  description: Maybe<StringQueryOperatorInput>;
  image: Maybe<StoreImageFilterListInput>;
  offers: Maybe<StoreAggregateOfferFilterInput>;
  sku: Maybe<StringQueryOperatorInput>;
  gtin: Maybe<StringQueryOperatorInput>;
  review: Maybe<StoreReviewFilterListInput>;
  aggregateRating: Maybe<StoreAggregateRatingFilterInput>;
  isVariantOf: Maybe<StoreProductGroupFilterInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};


type QueryAllStoreProductArgs = {
  filter: Maybe<StoreProductFilterInput>;
  sort: Maybe<StoreProductSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySitePluginArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  resolve: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  pluginOptions: Maybe<SitePluginPluginOptionsFilterInput>;
  nodeAPIs: Maybe<StringQueryOperatorInput>;
  browserAPIs: Maybe<StringQueryOperatorInput>;
  ssrAPIs: Maybe<StringQueryOperatorInput>;
  pluginFilepath: Maybe<StringQueryOperatorInput>;
  packageJson: Maybe<SitePluginPackageJsonFilterInput>;
};


type QueryAllSitePluginArgs = {
  filter: Maybe<SitePluginFilterInput>;
  sort: Maybe<SitePluginSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};


type QuerySiteBuildMetadataArgs = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  buildTime: Maybe<DateQueryOperatorInput>;
};


type QueryAllSiteBuildMetadataArgs = {
  filter: Maybe<SiteBuildMetadataFilterInput>;
  sort: Maybe<SiteBuildMetadataSortInput>;
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
};

type StringQueryOperatorInput = {
  eq: Maybe<Scalars['String']>;
  ne: Maybe<Scalars['String']>;
  in: Maybe<Array<Maybe<Scalars['String']>>>;
  nin: Maybe<Array<Maybe<Scalars['String']>>>;
  regex: Maybe<Scalars['String']>;
  glob: Maybe<Scalars['String']>;
};

type IntQueryOperatorInput = {
  eq: Maybe<Scalars['Int']>;
  ne: Maybe<Scalars['Int']>;
  gt: Maybe<Scalars['Int']>;
  gte: Maybe<Scalars['Int']>;
  lt: Maybe<Scalars['Int']>;
  lte: Maybe<Scalars['Int']>;
  in: Maybe<Array<Maybe<Scalars['Int']>>>;
  nin: Maybe<Array<Maybe<Scalars['Int']>>>;
};

type DateQueryOperatorInput = {
  eq: Maybe<Scalars['Date']>;
  ne: Maybe<Scalars['Date']>;
  gt: Maybe<Scalars['Date']>;
  gte: Maybe<Scalars['Date']>;
  lt: Maybe<Scalars['Date']>;
  lte: Maybe<Scalars['Date']>;
  in: Maybe<Array<Maybe<Scalars['Date']>>>;
  nin: Maybe<Array<Maybe<Scalars['Date']>>>;
};

type FloatQueryOperatorInput = {
  eq: Maybe<Scalars['Float']>;
  ne: Maybe<Scalars['Float']>;
  gt: Maybe<Scalars['Float']>;
  gte: Maybe<Scalars['Float']>;
  lt: Maybe<Scalars['Float']>;
  lte: Maybe<Scalars['Float']>;
  in: Maybe<Array<Maybe<Scalars['Float']>>>;
  nin: Maybe<Array<Maybe<Scalars['Float']>>>;
};

type NodeFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type NodeFilterListInput = {
  elemMatch: Maybe<NodeFilterInput>;
};

type InternalFilterInput = {
  content: Maybe<StringQueryOperatorInput>;
  contentDigest: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  fieldOwners: Maybe<StringQueryOperatorInput>;
  ignoreType: Maybe<BooleanQueryOperatorInput>;
  mediaType: Maybe<StringQueryOperatorInput>;
  owner: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
};

type BooleanQueryOperatorInput = {
  eq: Maybe<Scalars['Boolean']>;
  ne: Maybe<Scalars['Boolean']>;
  in: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  nin: Maybe<Array<Maybe<Scalars['Boolean']>>>;
};

type FileConnection = {
  totalCount: Scalars['Int'];
  edges: Array<FileEdge>;
  nodes: Array<File>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<FileGroupConnection>;
};


type FileConnectionDistinctArgs = {
  field: FileFieldsEnum;
};


type FileConnectionMaxArgs = {
  field: FileFieldsEnum;
};


type FileConnectionMinArgs = {
  field: FileFieldsEnum;
};


type FileConnectionSumArgs = {
  field: FileFieldsEnum;
};


type FileConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: FileFieldsEnum;
};

type FileEdge = {
  next: Maybe<File>;
  node: File;
  previous: Maybe<File>;
};

type PageInfo = {
  currentPage: Scalars['Int'];
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  itemCount: Scalars['Int'];
  pageCount: Scalars['Int'];
  perPage: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
};

type FileFieldsEnum =
  | 'sourceInstanceName'
  | 'absolutePath'
  | 'relativePath'
  | 'extension'
  | 'size'
  | 'prettySize'
  | 'modifiedTime'
  | 'accessTime'
  | 'changeTime'
  | 'birthTime'
  | 'root'
  | 'dir'
  | 'base'
  | 'ext'
  | 'name'
  | 'relativeDirectory'
  | 'dev'
  | 'mode'
  | 'nlink'
  | 'uid'
  | 'gid'
  | 'rdev'
  | 'ino'
  | 'atimeMs'
  | 'mtimeMs'
  | 'ctimeMs'
  | 'atime'
  | 'mtime'
  | 'ctime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type FileGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<FileEdge>;
  nodes: Array<File>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type FileFilterInput = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type FileSortInput = {
  fields: Maybe<Array<Maybe<FileFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type DirectoryConnection = {
  totalCount: Scalars['Int'];
  edges: Array<DirectoryEdge>;
  nodes: Array<Directory>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<DirectoryGroupConnection>;
};


type DirectoryConnectionDistinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionMaxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionMinArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionSumArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  next: Maybe<Directory>;
  node: Directory;
  previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'sourceInstanceName'
  | 'absolutePath'
  | 'relativePath'
  | 'extension'
  | 'size'
  | 'prettySize'
  | 'modifiedTime'
  | 'accessTime'
  | 'changeTime'
  | 'birthTime'
  | 'root'
  | 'dir'
  | 'base'
  | 'ext'
  | 'name'
  | 'relativeDirectory'
  | 'dev'
  | 'mode'
  | 'nlink'
  | 'uid'
  | 'gid'
  | 'rdev'
  | 'ino'
  | 'atimeMs'
  | 'mtimeMs'
  | 'ctimeMs'
  | 'atime'
  | 'mtime'
  | 'ctime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type DirectoryGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<DirectoryEdge>;
  nodes: Array<Directory>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type DirectoryFilterInput = {
  sourceInstanceName: Maybe<StringQueryOperatorInput>;
  absolutePath: Maybe<StringQueryOperatorInput>;
  relativePath: Maybe<StringQueryOperatorInput>;
  extension: Maybe<StringQueryOperatorInput>;
  size: Maybe<IntQueryOperatorInput>;
  prettySize: Maybe<StringQueryOperatorInput>;
  modifiedTime: Maybe<DateQueryOperatorInput>;
  accessTime: Maybe<DateQueryOperatorInput>;
  changeTime: Maybe<DateQueryOperatorInput>;
  birthTime: Maybe<DateQueryOperatorInput>;
  root: Maybe<StringQueryOperatorInput>;
  dir: Maybe<StringQueryOperatorInput>;
  base: Maybe<StringQueryOperatorInput>;
  ext: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  relativeDirectory: Maybe<StringQueryOperatorInput>;
  dev: Maybe<IntQueryOperatorInput>;
  mode: Maybe<IntQueryOperatorInput>;
  nlink: Maybe<IntQueryOperatorInput>;
  uid: Maybe<IntQueryOperatorInput>;
  gid: Maybe<IntQueryOperatorInput>;
  rdev: Maybe<IntQueryOperatorInput>;
  ino: Maybe<FloatQueryOperatorInput>;
  atimeMs: Maybe<FloatQueryOperatorInput>;
  mtimeMs: Maybe<FloatQueryOperatorInput>;
  ctimeMs: Maybe<FloatQueryOperatorInput>;
  atime: Maybe<DateQueryOperatorInput>;
  mtime: Maybe<DateQueryOperatorInput>;
  ctime: Maybe<DateQueryOperatorInput>;
  birthtime: Maybe<DateQueryOperatorInput>;
  birthtimeMs: Maybe<FloatQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type DirectorySortInput = {
  fields: Maybe<Array<Maybe<DirectoryFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteSiteMetadataFilterInput = {
  title: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  titleTemplate: Maybe<StringQueryOperatorInput>;
  author: Maybe<StringQueryOperatorInput>;
  siteUrl: Maybe<StringQueryOperatorInput>;
};

type SiteFlagsFilterInput = {
  DEV_SSR: Maybe<BooleanQueryOperatorInput>;
  FAST_DEV: Maybe<BooleanQueryOperatorInput>;
  LMDB_STORE: Maybe<BooleanQueryOperatorInput>;
  PARALLEL_SOURCING: Maybe<BooleanQueryOperatorInput>;
  PARALLEL_QUERY_RUNNING: Maybe<BooleanQueryOperatorInput>;
  PRESERVE_FILE_DOWNLOAD_CACHE: Maybe<BooleanQueryOperatorInput>;
};

type SiteConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteEdge>;
  nodes: Array<Site>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteGroupConnection>;
};


type SiteConnectionDistinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionMaxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionMinArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionSumArgs = {
  field: SiteFieldsEnum;
};


type SiteConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteFieldsEnum;
};

type SiteEdge = {
  next: Maybe<Site>;
  node: Site;
  previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'siteMetadata___title'
  | 'siteMetadata___description'
  | 'siteMetadata___titleTemplate'
  | 'siteMetadata___author'
  | 'siteMetadata___siteUrl'
  | 'port'
  | 'host'
  | 'flags___DEV_SSR'
  | 'flags___FAST_DEV'
  | 'flags___LMDB_STORE'
  | 'flags___PARALLEL_SOURCING'
  | 'flags___PARALLEL_QUERY_RUNNING'
  | 'flags___PRESERVE_FILE_DOWNLOAD_CACHE'
  | 'polyfill'
  | 'pathPrefix'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type SiteGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteEdge>;
  nodes: Array<Site>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteFilterInput = {
  buildTime: Maybe<DateQueryOperatorInput>;
  siteMetadata: Maybe<SiteSiteMetadataFilterInput>;
  port: Maybe<IntQueryOperatorInput>;
  host: Maybe<StringQueryOperatorInput>;
  flags: Maybe<SiteFlagsFilterInput>;
  polyfill: Maybe<BooleanQueryOperatorInput>;
  pathPrefix: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type SiteSortInput = {
  fields: Maybe<Array<Maybe<SiteFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteFunctionConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteFunctionEdge>;
  nodes: Array<SiteFunction>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteFunctionGroupConnection>;
};


type SiteFunctionConnectionDistinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionMaxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionMinArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionSumArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  next: Maybe<SiteFunction>;
  node: SiteFunction;
  previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'functionRoute'
  | 'pluginName'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'relativeCompiledFilePath'
  | 'absoluteCompiledFilePath'
  | 'matchPath'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type SiteFunctionGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteFunctionEdge>;
  nodes: Array<SiteFunction>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteFunctionFilterInput = {
  functionRoute: Maybe<StringQueryOperatorInput>;
  pluginName: Maybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: Maybe<StringQueryOperatorInput>;
  originalRelativeFilePath: Maybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: Maybe<StringQueryOperatorInput>;
  absoluteCompiledFilePath: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type SiteFunctionSortInput = {
  fields: Maybe<Array<Maybe<SiteFunctionFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SitePageContextFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  _xparams: Maybe<SitePageContext_XparamsFilterInput>;
};

type SitePageContext_XparamsFilterInput = {
  slug: Maybe<StringQueryOperatorInput>;
};

type SitePluginFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  resolve: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  pluginOptions: Maybe<SitePluginPluginOptionsFilterInput>;
  nodeAPIs: Maybe<StringQueryOperatorInput>;
  browserAPIs: Maybe<StringQueryOperatorInput>;
  ssrAPIs: Maybe<StringQueryOperatorInput>;
  pluginFilepath: Maybe<StringQueryOperatorInput>;
  packageJson: Maybe<SitePluginPackageJsonFilterInput>;
};

type SitePluginPluginOptionsFilterInput = {
  repositoryName: Maybe<StringQueryOperatorInput>;
  accessToken: Maybe<StringQueryOperatorInput>;
  promptForAccessToken: Maybe<BooleanQueryOperatorInput>;
  apiEndpoint: Maybe<StringQueryOperatorInput>;
  lang: Maybe<StringQueryOperatorInput>;
  imageImgixParams: Maybe<SitePluginPluginOptionsImageImgixParamsFilterInput>;
  imagePlaceholderImgixParams: Maybe<SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput>;
  toolbar: Maybe<StringQueryOperatorInput>;
  customTypesApiToken: Maybe<StringQueryOperatorInput>;
  releaseID: Maybe<StringQueryOperatorInput>;
  schemas: Maybe<SitePluginPluginOptionsSchemasFilterInput>;
  name: Maybe<StringQueryOperatorInput>;
  short_name: Maybe<StringQueryOperatorInput>;
  start_url: Maybe<StringQueryOperatorInput>;
  icon: Maybe<StringQueryOperatorInput>;
  background_color: Maybe<StringQueryOperatorInput>;
  theme_color: Maybe<StringQueryOperatorInput>;
  display: Maybe<StringQueryOperatorInput>;
  cache_busting_mode: Maybe<StringQueryOperatorInput>;
  legacy: Maybe<BooleanQueryOperatorInput>;
  theme_color_in_head: Maybe<BooleanQueryOperatorInput>;
  crossOrigin: Maybe<StringQueryOperatorInput>;
  include_favicon: Maybe<BooleanQueryOperatorInput>;
  precachePages: Maybe<StringQueryOperatorInput>;
  appendScript: Maybe<StringQueryOperatorInput>;
  workboxConfig: Maybe<SitePluginPluginOptionsWorkboxConfigFilterInput>;
  env: Maybe<SitePluginPluginOptionsEnvFilterInput>;
  defer: Maybe<BooleanQueryOperatorInput>;
  server: Maybe<StringQueryOperatorInput>;
  color: Maybe<StringQueryOperatorInput>;
  showSpinner: Maybe<BooleanQueryOperatorInput>;
  src: Maybe<StringQueryOperatorInput>;
  _generated: Maybe<StringQueryOperatorInput>;
  compare: Maybe<BooleanQueryOperatorInput>;
  baseline: Maybe<BooleanQueryOperatorInput>;
  html: Maybe<BooleanQueryOperatorInput>;
  json: Maybe<BooleanQueryOperatorInput>;
  outDir: Maybe<StringQueryOperatorInput>;
  stats: Maybe<SitePluginPluginOptionsStatsFilterInput>;
  sourceProducts: Maybe<BooleanQueryOperatorInput>;
  sourceCollections: Maybe<BooleanQueryOperatorInput>;
  maxNumProducts: Maybe<IntQueryOperatorInput>;
  maxNumCollections: Maybe<IntQueryOperatorInput>;
  httpOptions: Maybe<StringQueryOperatorInput>;
  serverOptions: Maybe<StringQueryOperatorInput>;
  path: Maybe<StringQueryOperatorInput>;
  pathCheck: Maybe<BooleanQueryOperatorInput>;
  allExtensions: Maybe<BooleanQueryOperatorInput>;
  isTSX: Maybe<BooleanQueryOperatorInput>;
  jsxPragma: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsImageImgixParamsFilterInput = {
  auto: Maybe<StringQueryOperatorInput>;
  fit: Maybe<StringQueryOperatorInput>;
  q: Maybe<IntQueryOperatorInput>;
};

type SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput = {
  w: Maybe<IntQueryOperatorInput>;
  blur: Maybe<IntQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasFilterInput = {
  home: Maybe<SitePluginPluginOptionsSchemasHomeFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeFilterInput = {
  Main: Maybe<SitePluginPluginOptionsSchemasHomeMainFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainFilterInput = {
  body: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  fieldset: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigFilterInput = {
  choices: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesFilterInput = {
  carousel: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselFilterInput>;
  shelf: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  fieldset: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  icon: Maybe<StringQueryOperatorInput>;
  display: Maybe<StringQueryOperatorInput>;
  non_repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatFilterInput>;
  repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatFilterInput = {
  title: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleFilterInput>;
  display_arrows: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsFilterInput>;
  display_dots: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleConfigFilterInput = {
  single: Maybe<StringQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsConfigFilterInput = {
  default_value: Maybe<BooleanQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsConfigFilterInput = {
  default_value: Maybe<BooleanQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatFilterInput = {
  items: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigFilterInput = {
  thumbnails: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnailsFilterListInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnailsFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnailsFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnailsFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  width: Maybe<IntQueryOperatorInput>;
  height: Maybe<IntQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  fieldset: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  icon: Maybe<StringQueryOperatorInput>;
  display: Maybe<StringQueryOperatorInput>;
  non_repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatFilterInput = {
  title: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleFilterInput>;
  display_dots: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsFilterInput>;
  display_arrows: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsFilterInput>;
  collection: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleConfigFilterInput = {
  single: Maybe<StringQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsConfigFilterInput = {
  default_value: Maybe<BooleanQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsConfigFilterInput = {
  default_value: Maybe<BooleanQueryOperatorInput>;
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionFilterInput = {
  type: Maybe<StringQueryOperatorInput>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionConfigFilterInput>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionConfigFilterInput = {
  label: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsWorkboxConfigFilterInput = {
  globPatterns: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvFilterInput = {
  production: Maybe<SitePluginPluginOptionsEnvProductionFilterInput>;
  branch_deploy: Maybe<SitePluginPluginOptionsEnvBranch_DeployFilterInput>;
  deploy_preview: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewFilterInput>;
};

type SitePluginPluginOptionsEnvProductionFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvProductionPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvProductionPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvProductionPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvProductionPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  allow: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewFilterInput = {
  policy: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterListInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterListInput = {
  elemMatch: Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterInput>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicyFilterInput = {
  userAgent: Maybe<StringQueryOperatorInput>;
  disallow: Maybe<StringQueryOperatorInput>;
};

type SitePluginPluginOptionsStatsFilterInput = {
  context: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
  main: Maybe<StringQueryOperatorInput>;
  license: Maybe<StringQueryOperatorInput>;
  dependencies: Maybe<SitePluginPackageJsonDependenciesFilterListInput>;
  devDependencies: Maybe<SitePluginPackageJsonDevDependenciesFilterListInput>;
  peerDependencies: Maybe<SitePluginPackageJsonPeerDependenciesFilterListInput>;
  keywords: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonDependenciesFilterInput>;
};

type SitePluginPackageJsonDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonDevDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonDevDependenciesFilterInput>;
};

type SitePluginPackageJsonDevDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePluginPackageJsonPeerDependenciesFilterListInput = {
  elemMatch: Maybe<SitePluginPackageJsonPeerDependenciesFilterInput>;
};

type SitePluginPackageJsonPeerDependenciesFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  version: Maybe<StringQueryOperatorInput>;
};

type SitePageConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePageEdge>;
  nodes: Array<SitePage>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SitePageGroupConnection>;
};


type SitePageConnectionDistinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionMaxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionMinArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionSumArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  next: Maybe<SitePage>;
  node: SitePage;
  previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'path'
  | 'component'
  | 'internalComponentName'
  | 'componentChunkName'
  | 'matchPath'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'isCreatedByStatefulCreatePages'
  | 'context___id'
  | 'context___slug'
  | 'context____xparams___slug'
  | 'pluginCreator___id'
  | 'pluginCreator___parent___id'
  | 'pluginCreator___parent___parent___id'
  | 'pluginCreator___parent___parent___children'
  | 'pluginCreator___parent___children'
  | 'pluginCreator___parent___children___id'
  | 'pluginCreator___parent___children___children'
  | 'pluginCreator___parent___internal___content'
  | 'pluginCreator___parent___internal___contentDigest'
  | 'pluginCreator___parent___internal___description'
  | 'pluginCreator___parent___internal___fieldOwners'
  | 'pluginCreator___parent___internal___ignoreType'
  | 'pluginCreator___parent___internal___mediaType'
  | 'pluginCreator___parent___internal___owner'
  | 'pluginCreator___parent___internal___type'
  | 'pluginCreator___children'
  | 'pluginCreator___children___id'
  | 'pluginCreator___children___parent___id'
  | 'pluginCreator___children___parent___children'
  | 'pluginCreator___children___children'
  | 'pluginCreator___children___children___id'
  | 'pluginCreator___children___children___children'
  | 'pluginCreator___children___internal___content'
  | 'pluginCreator___children___internal___contentDigest'
  | 'pluginCreator___children___internal___description'
  | 'pluginCreator___children___internal___fieldOwners'
  | 'pluginCreator___children___internal___ignoreType'
  | 'pluginCreator___children___internal___mediaType'
  | 'pluginCreator___children___internal___owner'
  | 'pluginCreator___children___internal___type'
  | 'pluginCreator___internal___content'
  | 'pluginCreator___internal___contentDigest'
  | 'pluginCreator___internal___description'
  | 'pluginCreator___internal___fieldOwners'
  | 'pluginCreator___internal___ignoreType'
  | 'pluginCreator___internal___mediaType'
  | 'pluginCreator___internal___owner'
  | 'pluginCreator___internal___type'
  | 'pluginCreator___resolve'
  | 'pluginCreator___name'
  | 'pluginCreator___version'
  | 'pluginCreator___pluginOptions___repositoryName'
  | 'pluginCreator___pluginOptions___accessToken'
  | 'pluginCreator___pluginOptions___promptForAccessToken'
  | 'pluginCreator___pluginOptions___apiEndpoint'
  | 'pluginCreator___pluginOptions___lang'
  | 'pluginCreator___pluginOptions___imageImgixParams___auto'
  | 'pluginCreator___pluginOptions___imageImgixParams___fit'
  | 'pluginCreator___pluginOptions___imageImgixParams___q'
  | 'pluginCreator___pluginOptions___imagePlaceholderImgixParams___w'
  | 'pluginCreator___pluginOptions___imagePlaceholderImgixParams___blur'
  | 'pluginCreator___pluginOptions___toolbar'
  | 'pluginCreator___pluginOptions___customTypesApiToken'
  | 'pluginCreator___pluginOptions___releaseID'
  | 'pluginCreator___pluginOptions___name'
  | 'pluginCreator___pluginOptions___short_name'
  | 'pluginCreator___pluginOptions___start_url'
  | 'pluginCreator___pluginOptions___icon'
  | 'pluginCreator___pluginOptions___background_color'
  | 'pluginCreator___pluginOptions___theme_color'
  | 'pluginCreator___pluginOptions___display'
  | 'pluginCreator___pluginOptions___cache_busting_mode'
  | 'pluginCreator___pluginOptions___legacy'
  | 'pluginCreator___pluginOptions___theme_color_in_head'
  | 'pluginCreator___pluginOptions___crossOrigin'
  | 'pluginCreator___pluginOptions___include_favicon'
  | 'pluginCreator___pluginOptions___precachePages'
  | 'pluginCreator___pluginOptions___appendScript'
  | 'pluginCreator___pluginOptions___workboxConfig___globPatterns'
  | 'pluginCreator___pluginOptions___defer'
  | 'pluginCreator___pluginOptions___server'
  | 'pluginCreator___pluginOptions___color'
  | 'pluginCreator___pluginOptions___showSpinner'
  | 'pluginCreator___pluginOptions___src'
  | 'pluginCreator___pluginOptions____generated'
  | 'pluginCreator___pluginOptions___compare'
  | 'pluginCreator___pluginOptions___baseline'
  | 'pluginCreator___pluginOptions___html'
  | 'pluginCreator___pluginOptions___json'
  | 'pluginCreator___pluginOptions___outDir'
  | 'pluginCreator___pluginOptions___stats___context'
  | 'pluginCreator___pluginOptions___sourceProducts'
  | 'pluginCreator___pluginOptions___sourceCollections'
  | 'pluginCreator___pluginOptions___maxNumProducts'
  | 'pluginCreator___pluginOptions___maxNumCollections'
  | 'pluginCreator___pluginOptions___httpOptions'
  | 'pluginCreator___pluginOptions___serverOptions'
  | 'pluginCreator___pluginOptions___path'
  | 'pluginCreator___pluginOptions___pathCheck'
  | 'pluginCreator___pluginOptions___allExtensions'
  | 'pluginCreator___pluginOptions___isTSX'
  | 'pluginCreator___pluginOptions___jsxPragma'
  | 'pluginCreator___nodeAPIs'
  | 'pluginCreator___browserAPIs'
  | 'pluginCreator___ssrAPIs'
  | 'pluginCreator___pluginFilepath'
  | 'pluginCreator___packageJson___name'
  | 'pluginCreator___packageJson___description'
  | 'pluginCreator___packageJson___version'
  | 'pluginCreator___packageJson___main'
  | 'pluginCreator___packageJson___license'
  | 'pluginCreator___packageJson___dependencies'
  | 'pluginCreator___packageJson___dependencies___name'
  | 'pluginCreator___packageJson___dependencies___version'
  | 'pluginCreator___packageJson___devDependencies'
  | 'pluginCreator___packageJson___devDependencies___name'
  | 'pluginCreator___packageJson___devDependencies___version'
  | 'pluginCreator___packageJson___peerDependencies'
  | 'pluginCreator___packageJson___peerDependencies___name'
  | 'pluginCreator___packageJson___peerDependencies___version'
  | 'pluginCreator___packageJson___keywords'
  | 'pluginCreatorId';

type SitePageGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePageEdge>;
  nodes: Array<SitePage>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SitePageFilterInput = {
  path: Maybe<StringQueryOperatorInput>;
  component: Maybe<StringQueryOperatorInput>;
  internalComponentName: Maybe<StringQueryOperatorInput>;
  componentChunkName: Maybe<StringQueryOperatorInput>;
  matchPath: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  isCreatedByStatefulCreatePages: Maybe<BooleanQueryOperatorInput>;
  context: Maybe<SitePageContextFilterInput>;
  pluginCreator: Maybe<SitePluginFilterInput>;
  pluginCreatorId: Maybe<StringQueryOperatorInput>;
};

type SitePageSortInput = {
  fields: Maybe<Array<Maybe<SitePageFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type PrismicEmbedTypeConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicEmbedTypeEdge>;
  nodes: Array<PrismicEmbedType>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<PrismicEmbedTypeGroupConnection>;
};


type PrismicEmbedTypeConnectionDistinctArgs = {
  field: PrismicEmbedTypeFieldsEnum;
};


type PrismicEmbedTypeConnectionMaxArgs = {
  field: PrismicEmbedTypeFieldsEnum;
};


type PrismicEmbedTypeConnectionMinArgs = {
  field: PrismicEmbedTypeFieldsEnum;
};


type PrismicEmbedTypeConnectionSumArgs = {
  field: PrismicEmbedTypeFieldsEnum;
};


type PrismicEmbedTypeConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: PrismicEmbedTypeFieldsEnum;
};

type PrismicEmbedTypeEdge = {
  next: Maybe<PrismicEmbedType>;
  node: PrismicEmbedType;
  previous: Maybe<PrismicEmbedType>;
};

type PrismicEmbedTypeFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type PrismicEmbedTypeGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicEmbedTypeEdge>;
  nodes: Array<PrismicEmbedType>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type PrismicEmbedTypeFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type PrismicEmbedTypeSortInput = {
  fields: Maybe<Array<Maybe<PrismicEmbedTypeFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type PrismicTypePathTypeConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicTypePathTypeEdge>;
  nodes: Array<PrismicTypePathType>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<PrismicTypePathTypeGroupConnection>;
};


type PrismicTypePathTypeConnectionDistinctArgs = {
  field: PrismicTypePathTypeFieldsEnum;
};


type PrismicTypePathTypeConnectionMaxArgs = {
  field: PrismicTypePathTypeFieldsEnum;
};


type PrismicTypePathTypeConnectionMinArgs = {
  field: PrismicTypePathTypeFieldsEnum;
};


type PrismicTypePathTypeConnectionSumArgs = {
  field: PrismicTypePathTypeFieldsEnum;
};


type PrismicTypePathTypeConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: PrismicTypePathTypeFieldsEnum;
};

type PrismicTypePathTypeEdge = {
  next: Maybe<PrismicTypePathType>;
  node: PrismicTypePathType;
  previous: Maybe<PrismicTypePathType>;
};

type PrismicTypePathTypeFieldsEnum =
  | 'path'
  | 'type'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type PrismicTypePathTypeGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicTypePathTypeEdge>;
  nodes: Array<PrismicTypePathType>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type PrismicTypePathTypeFilterInput = {
  path: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type PrismicTypePathTypeSortInput = {
  fields: Maybe<Array<Maybe<PrismicTypePathTypeFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type JsonQueryOperatorInput = {
  eq: Maybe<Scalars['JSON']>;
  ne: Maybe<Scalars['JSON']>;
  in: Maybe<Array<Maybe<Scalars['JSON']>>>;
  nin: Maybe<Array<Maybe<Scalars['JSON']>>>;
  regex: Maybe<Scalars['JSON']>;
  glob: Maybe<Scalars['JSON']>;
};

type IdQueryOperatorInput = {
  eq: Maybe<Scalars['ID']>;
  ne: Maybe<Scalars['ID']>;
  in: Maybe<Array<Maybe<Scalars['ID']>>>;
  nin: Maybe<Array<Maybe<Scalars['ID']>>>;
};

type PrismicAlternateLanguageTypeFilterListInput = {
  elemMatch: Maybe<PrismicAlternateLanguageTypeFilterInput>;
};

type PrismicAlternateLanguageTypeFilterInput = {
  id: Maybe<IdQueryOperatorInput>;
  uid: Maybe<StringQueryOperatorInput>;
  lang: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
  raw: Maybe<JsonQueryOperatorInput>;
};

type PrismicHomeConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicHomeEdge>;
  nodes: Array<PrismicHome>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<PrismicHomeGroupConnection>;
};


type PrismicHomeConnectionDistinctArgs = {
  field: PrismicHomeFieldsEnum;
};


type PrismicHomeConnectionMaxArgs = {
  field: PrismicHomeFieldsEnum;
};


type PrismicHomeConnectionMinArgs = {
  field: PrismicHomeFieldsEnum;
};


type PrismicHomeConnectionSumArgs = {
  field: PrismicHomeFieldsEnum;
};


type PrismicHomeConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: PrismicHomeFieldsEnum;
};

type PrismicHomeEdge = {
  next: Maybe<PrismicHome>;
  node: PrismicHome;
  previous: Maybe<PrismicHome>;
};

type PrismicHomeFieldsEnum =
  | 'dataRaw'
  | 'prismicId'
  | 'alternate_languages'
  | 'alternate_languages___id'
  | 'alternate_languages___uid'
  | 'alternate_languages___lang'
  | 'alternate_languages___type'
  | 'alternate_languages___raw'
  | 'first_publication_date'
  | 'href'
  | 'lang'
  | 'last_publication_date'
  | 'tags'
  | 'type'
  | 'url'
  | '_previewable'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type PrismicHomeGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<PrismicHomeEdge>;
  nodes: Array<PrismicHome>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type PrismicHomeFilterInput = {
  dataRaw: Maybe<JsonQueryOperatorInput>;
  prismicId: Maybe<IdQueryOperatorInput>;
  alternate_languages: Maybe<PrismicAlternateLanguageTypeFilterListInput>;
  first_publication_date: Maybe<DateQueryOperatorInput>;
  href: Maybe<StringQueryOperatorInput>;
  lang: Maybe<StringQueryOperatorInput>;
  last_publication_date: Maybe<DateQueryOperatorInput>;
  tags: Maybe<StringQueryOperatorInput>;
  type: Maybe<StringQueryOperatorInput>;
  url: Maybe<StringQueryOperatorInput>;
  _previewable: Maybe<IdQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type PrismicHomeSortInput = {
  fields: Maybe<Array<Maybe<PrismicHomeFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type StoreSeoFilterInput = {
  title: Maybe<StringQueryOperatorInput>;
  titleTemplate: Maybe<StringQueryOperatorInput>;
  description: Maybe<StringQueryOperatorInput>;
  canonical: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreBreadcrumbListFilterInput = {
  itemListElement: Maybe<StoreListItemFilterListInput>;
  numberOfItems: Maybe<IntQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreListItemFilterListInput = {
  elemMatch: Maybe<StoreListItemFilterInput>;
};

type StoreListItemFilterInput = {
  item: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  position: Maybe<IntQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreCollectionMetaFilterInput = {
  selectedFacets: Maybe<StoreCollectionFacetFilterListInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreCollectionFacetFilterListInput = {
  elemMatch: Maybe<StoreCollectionFacetFilterInput>;
};

type StoreCollectionFacetFilterInput = {
  key: Maybe<StringQueryOperatorInput>;
  value: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreCollectionTypeQueryOperatorInput = {
  eq: Maybe<StoreCollectionType>;
  ne: Maybe<StoreCollectionType>;
  in: Maybe<Array<Maybe<StoreCollectionType>>>;
  nin: Maybe<Array<Maybe<StoreCollectionType>>>;
};

type StoreCollectionConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreCollectionEdge>;
  nodes: Array<StoreCollection>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<StoreCollectionGroupConnection>;
};


type StoreCollectionConnectionDistinctArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionMaxArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionMinArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionSumArgs = {
  field: StoreCollectionFieldsEnum;
};


type StoreCollectionConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: StoreCollectionFieldsEnum;
};

type StoreCollectionFieldsEnum =
  | 'seo___title'
  | 'seo___titleTemplate'
  | 'seo___description'
  | 'seo___canonical'
  | 'seo___remoteTypeName'
  | 'breadcrumbList___itemListElement'
  | 'breadcrumbList___itemListElement___item'
  | 'breadcrumbList___itemListElement___name'
  | 'breadcrumbList___itemListElement___position'
  | 'breadcrumbList___itemListElement___remoteTypeName'
  | 'breadcrumbList___numberOfItems'
  | 'breadcrumbList___remoteTypeName'
  | 'meta___selectedFacets'
  | 'meta___selectedFacets___key'
  | 'meta___selectedFacets___value'
  | 'meta___selectedFacets___remoteTypeName'
  | 'meta___remoteTypeName'
  | 'id'
  | 'slug'
  | 'type'
  | 'remoteTypeName'
  | 'remoteId'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type StoreCollectionGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreCollectionEdge>;
  nodes: Array<StoreCollection>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type StoreCollectionFilterInput = {
  seo: Maybe<StoreSeoFilterInput>;
  breadcrumbList: Maybe<StoreBreadcrumbListFilterInput>;
  meta: Maybe<StoreCollectionMetaFilterInput>;
  id: Maybe<StringQueryOperatorInput>;
  slug: Maybe<StringQueryOperatorInput>;
  type: Maybe<StoreCollectionTypeQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  remoteId: Maybe<IdQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type StoreCollectionSortInput = {
  fields: Maybe<Array<Maybe<StoreCollectionFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type StoreBrandFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreImageFilterListInput = {
  elemMatch: Maybe<StoreImageFilterInput>;
};

type StoreImageFilterInput = {
  url: Maybe<StringQueryOperatorInput>;
  alternateName: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreAggregateOfferFilterInput = {
  highPrice: Maybe<FloatQueryOperatorInput>;
  lowPrice: Maybe<FloatQueryOperatorInput>;
  offerCount: Maybe<IntQueryOperatorInput>;
  priceCurrency: Maybe<StringQueryOperatorInput>;
  offers: Maybe<StoreOfferFilterListInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreOfferFilterListInput = {
  elemMatch: Maybe<StoreOfferFilterInput>;
};

type StoreOfferFilterInput = {
  listPrice: Maybe<FloatQueryOperatorInput>;
  sellingPrice: Maybe<FloatQueryOperatorInput>;
  priceCurrency: Maybe<StringQueryOperatorInput>;
  price: Maybe<FloatQueryOperatorInput>;
  priceValidUntil: Maybe<StringQueryOperatorInput>;
  itemCondition: Maybe<StringQueryOperatorInput>;
  availability: Maybe<StringQueryOperatorInput>;
  seller: Maybe<StoreOrganizationFilterInput>;
  itemOffered: Maybe<StoreProductFilterInput>;
  quantity: Maybe<IntQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreOrganizationFilterInput = {
  identifier: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreProductFilterInput = {
  seo: Maybe<StoreSeoFilterInput>;
  breadcrumbList: Maybe<StoreBreadcrumbListFilterInput>;
  slug: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  productID: Maybe<StringQueryOperatorInput>;
  brand: Maybe<StoreBrandFilterInput>;
  description: Maybe<StringQueryOperatorInput>;
  image: Maybe<StoreImageFilterListInput>;
  offers: Maybe<StoreAggregateOfferFilterInput>;
  sku: Maybe<StringQueryOperatorInput>;
  gtin: Maybe<StringQueryOperatorInput>;
  review: Maybe<StoreReviewFilterListInput>;
  aggregateRating: Maybe<StoreAggregateRatingFilterInput>;
  isVariantOf: Maybe<StoreProductGroupFilterInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
};

type StoreReviewFilterListInput = {
  elemMatch: Maybe<StoreReviewFilterInput>;
};

type StoreReviewFilterInput = {
  reviewRating: Maybe<StoreReviewRatingFilterInput>;
  author: Maybe<StoreAuthorFilterInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreReviewRatingFilterInput = {
  ratingValue: Maybe<FloatQueryOperatorInput>;
  bestRating: Maybe<FloatQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreAuthorFilterInput = {
  name: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreAggregateRatingFilterInput = {
  ratingValue: Maybe<FloatQueryOperatorInput>;
  reviewCount: Maybe<IntQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreProductGroupFilterInput = {
  hasVariant: Maybe<StoreProductFilterListInput>;
  productGroupID: Maybe<StringQueryOperatorInput>;
  name: Maybe<StringQueryOperatorInput>;
  remoteTypeName: Maybe<StringQueryOperatorInput>;
};

type StoreProductFilterListInput = {
  elemMatch: Maybe<StoreProductFilterInput>;
};

type StoreProductConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreProductEdge>;
  nodes: Array<StoreProduct>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<StoreProductGroupConnection>;
};


type StoreProductConnectionDistinctArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionMaxArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionMinArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionSumArgs = {
  field: StoreProductFieldsEnum;
};


type StoreProductConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: StoreProductFieldsEnum;
};

type StoreProductFieldsEnum =
  | 'seo___title'
  | 'seo___titleTemplate'
  | 'seo___description'
  | 'seo___canonical'
  | 'seo___remoteTypeName'
  | 'breadcrumbList___itemListElement'
  | 'breadcrumbList___itemListElement___item'
  | 'breadcrumbList___itemListElement___name'
  | 'breadcrumbList___itemListElement___position'
  | 'breadcrumbList___itemListElement___remoteTypeName'
  | 'breadcrumbList___numberOfItems'
  | 'breadcrumbList___remoteTypeName'
  | 'slug'
  | 'name'
  | 'productID'
  | 'brand___name'
  | 'brand___remoteTypeName'
  | 'description'
  | 'image'
  | 'image___url'
  | 'image___alternateName'
  | 'image___remoteTypeName'
  | 'offers___highPrice'
  | 'offers___lowPrice'
  | 'offers___offerCount'
  | 'offers___priceCurrency'
  | 'offers___offers'
  | 'offers___offers___listPrice'
  | 'offers___offers___sellingPrice'
  | 'offers___offers___priceCurrency'
  | 'offers___offers___price'
  | 'offers___offers___priceValidUntil'
  | 'offers___offers___itemCondition'
  | 'offers___offers___availability'
  | 'offers___offers___seller___identifier'
  | 'offers___offers___seller___remoteTypeName'
  | 'offers___offers___itemOffered___slug'
  | 'offers___offers___itemOffered___name'
  | 'offers___offers___itemOffered___productID'
  | 'offers___offers___itemOffered___description'
  | 'offers___offers___itemOffered___image'
  | 'offers___offers___itemOffered___sku'
  | 'offers___offers___itemOffered___gtin'
  | 'offers___offers___itemOffered___review'
  | 'offers___offers___itemOffered___remoteTypeName'
  | 'offers___offers___itemOffered___id'
  | 'offers___offers___itemOffered___children'
  | 'offers___offers___quantity'
  | 'offers___offers___remoteTypeName'
  | 'offers___remoteTypeName'
  | 'sku'
  | 'gtin'
  | 'review'
  | 'review___reviewRating___ratingValue'
  | 'review___reviewRating___bestRating'
  | 'review___reviewRating___remoteTypeName'
  | 'review___author___name'
  | 'review___author___remoteTypeName'
  | 'review___remoteTypeName'
  | 'aggregateRating___ratingValue'
  | 'aggregateRating___reviewCount'
  | 'aggregateRating___remoteTypeName'
  | 'isVariantOf___hasVariant'
  | 'isVariantOf___hasVariant___seo___title'
  | 'isVariantOf___hasVariant___seo___titleTemplate'
  | 'isVariantOf___hasVariant___seo___description'
  | 'isVariantOf___hasVariant___seo___canonical'
  | 'isVariantOf___hasVariant___seo___remoteTypeName'
  | 'isVariantOf___hasVariant___breadcrumbList___itemListElement'
  | 'isVariantOf___hasVariant___breadcrumbList___numberOfItems'
  | 'isVariantOf___hasVariant___breadcrumbList___remoteTypeName'
  | 'isVariantOf___hasVariant___slug'
  | 'isVariantOf___hasVariant___name'
  | 'isVariantOf___hasVariant___productID'
  | 'isVariantOf___hasVariant___brand___name'
  | 'isVariantOf___hasVariant___brand___remoteTypeName'
  | 'isVariantOf___hasVariant___description'
  | 'isVariantOf___hasVariant___image'
  | 'isVariantOf___hasVariant___image___url'
  | 'isVariantOf___hasVariant___image___alternateName'
  | 'isVariantOf___hasVariant___image___remoteTypeName'
  | 'isVariantOf___hasVariant___offers___highPrice'
  | 'isVariantOf___hasVariant___offers___lowPrice'
  | 'isVariantOf___hasVariant___offers___offerCount'
  | 'isVariantOf___hasVariant___offers___priceCurrency'
  | 'isVariantOf___hasVariant___offers___offers'
  | 'isVariantOf___hasVariant___offers___remoteTypeName'
  | 'isVariantOf___hasVariant___sku'
  | 'isVariantOf___hasVariant___gtin'
  | 'isVariantOf___hasVariant___review'
  | 'isVariantOf___hasVariant___review___remoteTypeName'
  | 'isVariantOf___hasVariant___aggregateRating___ratingValue'
  | 'isVariantOf___hasVariant___aggregateRating___reviewCount'
  | 'isVariantOf___hasVariant___aggregateRating___remoteTypeName'
  | 'isVariantOf___hasVariant___isVariantOf___hasVariant'
  | 'isVariantOf___hasVariant___isVariantOf___productGroupID'
  | 'isVariantOf___hasVariant___isVariantOf___name'
  | 'isVariantOf___hasVariant___isVariantOf___remoteTypeName'
  | 'isVariantOf___hasVariant___remoteTypeName'
  | 'isVariantOf___hasVariant___id'
  | 'isVariantOf___hasVariant___parent___id'
  | 'isVariantOf___hasVariant___parent___children'
  | 'isVariantOf___hasVariant___children'
  | 'isVariantOf___hasVariant___children___id'
  | 'isVariantOf___hasVariant___children___children'
  | 'isVariantOf___hasVariant___internal___content'
  | 'isVariantOf___hasVariant___internal___contentDigest'
  | 'isVariantOf___hasVariant___internal___description'
  | 'isVariantOf___hasVariant___internal___fieldOwners'
  | 'isVariantOf___hasVariant___internal___ignoreType'
  | 'isVariantOf___hasVariant___internal___mediaType'
  | 'isVariantOf___hasVariant___internal___owner'
  | 'isVariantOf___hasVariant___internal___type'
  | 'isVariantOf___productGroupID'
  | 'isVariantOf___name'
  | 'isVariantOf___remoteTypeName'
  | 'remoteTypeName'
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type';

type StoreProductGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<StoreProductEdge>;
  nodes: Array<StoreProduct>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type StoreProductSortInput = {
  fields: Maybe<Array<Maybe<StoreProductFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SitePluginConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePluginEdge>;
  nodes: Array<SitePlugin>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SitePluginGroupConnection>;
};


type SitePluginConnectionDistinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionMaxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionMinArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionSumArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  next: Maybe<SitePlugin>;
  node: SitePlugin;
  previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'resolve'
  | 'name'
  | 'version'
  | 'pluginOptions___repositoryName'
  | 'pluginOptions___accessToken'
  | 'pluginOptions___promptForAccessToken'
  | 'pluginOptions___apiEndpoint'
  | 'pluginOptions___lang'
  | 'pluginOptions___imageImgixParams___auto'
  | 'pluginOptions___imageImgixParams___fit'
  | 'pluginOptions___imageImgixParams___q'
  | 'pluginOptions___imagePlaceholderImgixParams___w'
  | 'pluginOptions___imagePlaceholderImgixParams___blur'
  | 'pluginOptions___toolbar'
  | 'pluginOptions___customTypesApiToken'
  | 'pluginOptions___releaseID'
  | 'pluginOptions___name'
  | 'pluginOptions___short_name'
  | 'pluginOptions___start_url'
  | 'pluginOptions___icon'
  | 'pluginOptions___background_color'
  | 'pluginOptions___theme_color'
  | 'pluginOptions___display'
  | 'pluginOptions___cache_busting_mode'
  | 'pluginOptions___legacy'
  | 'pluginOptions___theme_color_in_head'
  | 'pluginOptions___crossOrigin'
  | 'pluginOptions___include_favicon'
  | 'pluginOptions___precachePages'
  | 'pluginOptions___appendScript'
  | 'pluginOptions___workboxConfig___globPatterns'
  | 'pluginOptions___env___production___policy'
  | 'pluginOptions___env___branch_deploy___policy'
  | 'pluginOptions___env___deploy_preview___policy'
  | 'pluginOptions___defer'
  | 'pluginOptions___server'
  | 'pluginOptions___color'
  | 'pluginOptions___showSpinner'
  | 'pluginOptions___src'
  | 'pluginOptions____generated'
  | 'pluginOptions___compare'
  | 'pluginOptions___baseline'
  | 'pluginOptions___html'
  | 'pluginOptions___json'
  | 'pluginOptions___outDir'
  | 'pluginOptions___stats___context'
  | 'pluginOptions___sourceProducts'
  | 'pluginOptions___sourceCollections'
  | 'pluginOptions___maxNumProducts'
  | 'pluginOptions___maxNumCollections'
  | 'pluginOptions___httpOptions'
  | 'pluginOptions___serverOptions'
  | 'pluginOptions___path'
  | 'pluginOptions___pathCheck'
  | 'pluginOptions___allExtensions'
  | 'pluginOptions___isTSX'
  | 'pluginOptions___jsxPragma'
  | 'nodeAPIs'
  | 'browserAPIs'
  | 'ssrAPIs'
  | 'pluginFilepath'
  | 'packageJson___name'
  | 'packageJson___description'
  | 'packageJson___version'
  | 'packageJson___main'
  | 'packageJson___license'
  | 'packageJson___dependencies'
  | 'packageJson___dependencies___name'
  | 'packageJson___dependencies___version'
  | 'packageJson___devDependencies'
  | 'packageJson___devDependencies___name'
  | 'packageJson___devDependencies___version'
  | 'packageJson___peerDependencies'
  | 'packageJson___peerDependencies___name'
  | 'packageJson___peerDependencies___version'
  | 'packageJson___keywords';

type SitePluginGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SitePluginEdge>;
  nodes: Array<SitePlugin>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SitePluginSortInput = {
  fields: Maybe<Array<Maybe<SitePluginFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type SiteBuildMetadataConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteBuildMetadataEdge>;
  nodes: Array<SiteBuildMetadata>;
  pageInfo: PageInfo;
  distinct: Array<Scalars['String']>;
  max: Maybe<Scalars['Float']>;
  min: Maybe<Scalars['Float']>;
  sum: Maybe<Scalars['Float']>;
  group: Array<SiteBuildMetadataGroupConnection>;
};


type SiteBuildMetadataConnectionDistinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionMaxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionMinArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionSumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnectionGroupArgs = {
  skip: Maybe<Scalars['Int']>;
  limit: Maybe<Scalars['Int']>;
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  next: Maybe<SiteBuildMetadata>;
  node: SiteBuildMetadata;
  previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'id'
  | 'parent___id'
  | 'parent___parent___id'
  | 'parent___parent___parent___id'
  | 'parent___parent___parent___children'
  | 'parent___parent___children'
  | 'parent___parent___children___id'
  | 'parent___parent___children___children'
  | 'parent___parent___internal___content'
  | 'parent___parent___internal___contentDigest'
  | 'parent___parent___internal___description'
  | 'parent___parent___internal___fieldOwners'
  | 'parent___parent___internal___ignoreType'
  | 'parent___parent___internal___mediaType'
  | 'parent___parent___internal___owner'
  | 'parent___parent___internal___type'
  | 'parent___children'
  | 'parent___children___id'
  | 'parent___children___parent___id'
  | 'parent___children___parent___children'
  | 'parent___children___children'
  | 'parent___children___children___id'
  | 'parent___children___children___children'
  | 'parent___children___internal___content'
  | 'parent___children___internal___contentDigest'
  | 'parent___children___internal___description'
  | 'parent___children___internal___fieldOwners'
  | 'parent___children___internal___ignoreType'
  | 'parent___children___internal___mediaType'
  | 'parent___children___internal___owner'
  | 'parent___children___internal___type'
  | 'parent___internal___content'
  | 'parent___internal___contentDigest'
  | 'parent___internal___description'
  | 'parent___internal___fieldOwners'
  | 'parent___internal___ignoreType'
  | 'parent___internal___mediaType'
  | 'parent___internal___owner'
  | 'parent___internal___type'
  | 'children'
  | 'children___id'
  | 'children___parent___id'
  | 'children___parent___parent___id'
  | 'children___parent___parent___children'
  | 'children___parent___children'
  | 'children___parent___children___id'
  | 'children___parent___children___children'
  | 'children___parent___internal___content'
  | 'children___parent___internal___contentDigest'
  | 'children___parent___internal___description'
  | 'children___parent___internal___fieldOwners'
  | 'children___parent___internal___ignoreType'
  | 'children___parent___internal___mediaType'
  | 'children___parent___internal___owner'
  | 'children___parent___internal___type'
  | 'children___children'
  | 'children___children___id'
  | 'children___children___parent___id'
  | 'children___children___parent___children'
  | 'children___children___children'
  | 'children___children___children___id'
  | 'children___children___children___children'
  | 'children___children___internal___content'
  | 'children___children___internal___contentDigest'
  | 'children___children___internal___description'
  | 'children___children___internal___fieldOwners'
  | 'children___children___internal___ignoreType'
  | 'children___children___internal___mediaType'
  | 'children___children___internal___owner'
  | 'children___children___internal___type'
  | 'children___internal___content'
  | 'children___internal___contentDigest'
  | 'children___internal___description'
  | 'children___internal___fieldOwners'
  | 'children___internal___ignoreType'
  | 'children___internal___mediaType'
  | 'children___internal___owner'
  | 'children___internal___type'
  | 'internal___content'
  | 'internal___contentDigest'
  | 'internal___description'
  | 'internal___fieldOwners'
  | 'internal___ignoreType'
  | 'internal___mediaType'
  | 'internal___owner'
  | 'internal___type'
  | 'buildTime';

type SiteBuildMetadataGroupConnection = {
  totalCount: Scalars['Int'];
  edges: Array<SiteBuildMetadataEdge>;
  nodes: Array<SiteBuildMetadata>;
  pageInfo: PageInfo;
  field: Scalars['String'];
  fieldValue: Maybe<Scalars['String']>;
};

type SiteBuildMetadataFilterInput = {
  id: Maybe<StringQueryOperatorInput>;
  parent: Maybe<NodeFilterInput>;
  children: Maybe<NodeFilterListInput>;
  internal: Maybe<InternalFilterInput>;
  buildTime: Maybe<DateQueryOperatorInput>;
};

type SiteBuildMetadataSortInput = {
  fields: Maybe<Array<Maybe<SiteBuildMetadataFieldsEnum>>>;
  order: Maybe<Array<Maybe<SortOrderEnum>>>;
};

type StoreBrand = {
  name: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type StoreListItem = {
  item: Scalars['String'];
  name: Scalars['String'];
  position: Scalars['Int'];
  remoteTypeName: Scalars['String'];
};

type StoreBreadcrumbList = {
  itemListElement: Array<StoreListItem>;
  numberOfItems: Scalars['Int'];
  remoteTypeName: Scalars['String'];
};

type StoreCollectionType =
  | 'Department'
  | 'Category'
  | 'Brand'
  | 'Cluster';

type StoreCollectionFacet = {
  key: Scalars['String'];
  value: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type StoreCollectionMeta = {
  selectedFacets: Array<StoreCollectionFacet>;
  remoteTypeName: Scalars['String'];
};

type StoreCollection = Node & {
  seo: StoreSeo;
  breadcrumbList: StoreBreadcrumbList;
  meta: StoreCollectionMeta;
  id: Scalars['ID'];
  slug: Scalars['String'];
  type: StoreCollectionType;
  remoteTypeName: Scalars['String'];
  remoteId: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type StoreFacet = {
  key: Scalars['String'];
  label: Scalars['String'];
  values: Array<StoreFacetValue>;
  type: StoreFacetType;
};

type StoreFacetValue = {
  value: Scalars['String'];
  label: Scalars['String'];
  selected: Scalars['Boolean'];
  quantity: Scalars['Int'];
};

type StoreImage = {
  url: Scalars['String'];
  alternateName: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type IStoreImage = {
  url: Scalars['String'];
  alternateName: Scalars['String'];
};

type StorePageInfo = {
  hasNextPage: Scalars['Boolean'];
  hasPreviousPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
  totalCount: Scalars['Int'];
};

type StoreProduct = Node & {
  seo: StoreSeo;
  breadcrumbList: StoreBreadcrumbList;
  slug: Scalars['String'];
  name: Scalars['String'];
  productID: Scalars['String'];
  brand: StoreBrand;
  description: Scalars['String'];
  image: Array<StoreImage>;
  offers: StoreAggregateOffer;
  sku: Scalars['String'];
  gtin: Scalars['String'];
  review: Array<StoreReview>;
  aggregateRating: StoreAggregateRating;
  isVariantOf: StoreProductGroup;
  remoteTypeName: Scalars['String'];
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
};

type IStoreProduct = {
  sku: Scalars['String'];
  name: Scalars['String'];
  image: Array<IStoreImage>;
};

type StoreSeo = {
  title: Scalars['String'];
  titleTemplate: Scalars['String'];
  description: Scalars['String'];
  canonical: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type StoreOffer = {
  listPrice: Scalars['Float'];
  sellingPrice: Scalars['Float'];
  priceCurrency: Scalars['String'];
  price: Scalars['Float'];
  priceValidUntil: Scalars['String'];
  itemCondition: Scalars['String'];
  availability: Scalars['String'];
  seller: StoreOrganization;
  itemOffered: StoreProduct;
  quantity: Scalars['Int'];
  remoteTypeName: Scalars['String'];
};

type IStoreOffer = {
  price: Scalars['Float'];
  listPrice: Scalars['Float'];
  seller: IStoreOrganization;
  itemOffered: IStoreProduct;
  quantity: Scalars['Int'];
};

type StoreAggregateRating = {
  ratingValue: Scalars['Float'];
  reviewCount: Scalars['Int'];
  remoteTypeName: Scalars['String'];
};

type StoreReviewRating = {
  ratingValue: Scalars['Float'];
  bestRating: Scalars['Float'];
  remoteTypeName: Scalars['String'];
};

type StoreReview = {
  reviewRating: StoreReviewRating;
  author: StoreAuthor;
  remoteTypeName: Scalars['String'];
};

type StoreAuthor = {
  name: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type StoreProductGroup = {
  hasVariant: Array<StoreProduct>;
  productGroupID: Scalars['String'];
  name: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type StoreOrganization = {
  identifier: Scalars['String'];
  remoteTypeName: Scalars['String'];
};

type IStoreOrganization = {
  identifier: Scalars['String'];
};

type StoreAggregateOffer = {
  highPrice: Scalars['Float'];
  lowPrice: Scalars['Float'];
  offerCount: Scalars['Int'];
  priceCurrency: Scalars['String'];
  offers: Array<StoreOffer>;
  remoteTypeName: Scalars['String'];
};

type Mutation = {
  validateCart: Maybe<StoreCart>;
};


type MutationValidateCartArgs = {
  cart: IStoreCart;
};

type StoreOrder = {
  orderNumber: Scalars['String'];
  acceptedOffer: Array<StoreOffer>;
};

type IStoreOrder = {
  orderNumber: Scalars['String'];
  acceptedOffer: Array<IStoreOffer>;
};

type StoreCartMessage = {
  text: Scalars['String'];
  status: StoreStatus;
};

type StoreCart = {
  order: StoreOrder;
  messages: Array<StoreCartMessage>;
};

type IStoreCart = {
  order: IStoreOrder;
};

type StoreStatus =
  | 'INFO'
  | 'WARNING'
  | 'ERROR';

type StoreProductConnection_Remote = {
  edges: Array<StoreProductEdge>;
  pageInfo: StorePageInfo;
};

type StoreCollectionConnection_Remote = {
  edges: Array<StoreCollectionEdge>;
  pageInfo: StorePageInfo;
};

type SitePlugin = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  resolve: Maybe<Scalars['String']>;
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
  pluginOptions: Maybe<SitePluginPluginOptions>;
  nodeAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  browserAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  ssrAPIs: Maybe<Array<Maybe<Scalars['String']>>>;
  pluginFilepath: Maybe<Scalars['String']>;
  packageJson: Maybe<SitePluginPackageJson>;
};

type SitePluginPluginOptions = {
  repositoryName: Maybe<Scalars['String']>;
  accessToken: Maybe<Scalars['String']>;
  promptForAccessToken: Maybe<Scalars['Boolean']>;
  apiEndpoint: Maybe<Scalars['String']>;
  lang: Maybe<Scalars['String']>;
  imageImgixParams: Maybe<SitePluginPluginOptionsImageImgixParams>;
  imagePlaceholderImgixParams: Maybe<SitePluginPluginOptionsImagePlaceholderImgixParams>;
  toolbar: Maybe<Scalars['String']>;
  customTypesApiToken: Maybe<Scalars['String']>;
  releaseID: Maybe<Scalars['String']>;
  schemas: Maybe<SitePluginPluginOptionsSchemas>;
  name: Maybe<Scalars['String']>;
  short_name: Maybe<Scalars['String']>;
  start_url: Maybe<Scalars['String']>;
  icon: Maybe<Scalars['String']>;
  background_color: Maybe<Scalars['String']>;
  theme_color: Maybe<Scalars['String']>;
  display: Maybe<Scalars['String']>;
  cache_busting_mode: Maybe<Scalars['String']>;
  legacy: Maybe<Scalars['Boolean']>;
  theme_color_in_head: Maybe<Scalars['Boolean']>;
  crossOrigin: Maybe<Scalars['String']>;
  include_favicon: Maybe<Scalars['Boolean']>;
  precachePages: Maybe<Array<Maybe<Scalars['String']>>>;
  appendScript: Maybe<Scalars['String']>;
  workboxConfig: Maybe<SitePluginPluginOptionsWorkboxConfig>;
  env: Maybe<SitePluginPluginOptionsEnv>;
  defer: Maybe<Scalars['Boolean']>;
  server: Maybe<Scalars['String']>;
  color: Maybe<Scalars['String']>;
  showSpinner: Maybe<Scalars['Boolean']>;
  src: Maybe<Scalars['String']>;
  _generated: Maybe<Scalars['String']>;
  compare: Maybe<Scalars['Boolean']>;
  baseline: Maybe<Scalars['Boolean']>;
  html: Maybe<Scalars['Boolean']>;
  json: Maybe<Scalars['Boolean']>;
  outDir: Maybe<Scalars['String']>;
  stats: Maybe<SitePluginPluginOptionsStats>;
  sourceProducts: Maybe<Scalars['Boolean']>;
  sourceCollections: Maybe<Scalars['Boolean']>;
  maxNumProducts: Maybe<Scalars['Int']>;
  maxNumCollections: Maybe<Scalars['Int']>;
  httpOptions: Maybe<Array<Maybe<Array<Maybe<Scalars['String']>>>>>;
  serverOptions: Maybe<Array<Maybe<Array<Maybe<Scalars['String']>>>>>;
  path: Maybe<Scalars['String']>;
  pathCheck: Maybe<Scalars['Boolean']>;
  allExtensions: Maybe<Scalars['Boolean']>;
  isTSX: Maybe<Scalars['Boolean']>;
  jsxPragma: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsImageImgixParams = {
  auto: Maybe<Scalars['String']>;
  fit: Maybe<Scalars['String']>;
  q: Maybe<Scalars['Int']>;
};

type SitePluginPluginOptionsImagePlaceholderImgixParams = {
  w: Maybe<Scalars['Int']>;
  blur: Maybe<Scalars['Int']>;
};

type SitePluginPluginOptionsSchemas = {
  home: Maybe<SitePluginPluginOptionsSchemasHome>;
};

type SitePluginPluginOptionsSchemasHome = {
  Main: Maybe<SitePluginPluginOptionsSchemasHomeMain>;
};

type SitePluginPluginOptionsSchemasHomeMain = {
  body: Maybe<SitePluginPluginOptionsSchemasHomeMainBody>;
};

type SitePluginPluginOptionsSchemasHomeMainBody = {
  type: Maybe<Scalars['String']>;
  fieldset: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfig = {
  choices: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoices>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoices = {
  carousel: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarousel>;
  shelf: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelf>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarousel = {
  type: Maybe<Scalars['String']>;
  fieldset: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  icon: Maybe<Scalars['String']>;
  display: Maybe<Scalars['String']>;
  non_repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_Repeat>;
  repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeat>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_Repeat = {
  title: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitle>;
  display_arrows: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_Arrows>;
  display_dots: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_Dots>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitle = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatTitleConfig = {
  single: Maybe<Scalars['String']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_Arrows = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_ArrowsConfig = {
  default_value: Maybe<Scalars['Boolean']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_Dots = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselNon_RepeatDisplay_DotsConfig = {
  default_value: Maybe<Scalars['Boolean']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeat = {
  items: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItems>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItems = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfig = {
  thumbnails: Maybe<Array<Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnails>>>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesCarouselRepeatItemsConfigThumbnails = {
  name: Maybe<Scalars['String']>;
  width: Maybe<Scalars['Int']>;
  height: Maybe<Scalars['Int']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelf = {
  type: Maybe<Scalars['String']>;
  fieldset: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  icon: Maybe<Scalars['String']>;
  display: Maybe<Scalars['String']>;
  non_repeat: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_Repeat>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_Repeat = {
  title: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitle>;
  display_dots: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_Dots>;
  display_arrows: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_Arrows>;
  collection: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollection>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitle = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatTitleConfig = {
  single: Maybe<Scalars['String']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_Dots = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_DotsConfig = {
  default_value: Maybe<Scalars['Boolean']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_Arrows = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatDisplay_ArrowsConfig = {
  default_value: Maybe<Scalars['Boolean']>;
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollection = {
  type: Maybe<Scalars['String']>;
  config: Maybe<SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionConfig>;
};

type SitePluginPluginOptionsSchemasHomeMainBodyConfigChoicesShelfNon_RepeatCollectionConfig = {
  label: Maybe<Scalars['String']>;
};

type SitePluginPluginOptionsWorkboxConfig = {
  globPatterns: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsEnv = {
  production: Maybe<SitePluginPluginOptionsEnvProduction>;
  branch_deploy: Maybe<SitePluginPluginOptionsEnvBranch_Deploy>;
  deploy_preview: Maybe<SitePluginPluginOptionsEnvDeploy_Preview>;
};

type SitePluginPluginOptionsEnvProduction = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvProductionPolicy>>>;
};

type SitePluginPluginOptionsEnvProductionPolicy = {
  userAgent: Maybe<Scalars['String']>;
  allow: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsEnvBranch_Deploy = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvBranch_DeployPolicy>>>;
};

type SitePluginPluginOptionsEnvBranch_DeployPolicy = {
  userAgent: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsEnvDeploy_Preview = {
  policy: Maybe<Array<Maybe<SitePluginPluginOptionsEnvDeploy_PreviewPolicy>>>;
};

type SitePluginPluginOptionsEnvDeploy_PreviewPolicy = {
  userAgent: Maybe<Scalars['String']>;
  disallow: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPluginOptionsStats = {
  context: Maybe<Scalars['String']>;
};

type SitePluginPackageJson = {
  name: Maybe<Scalars['String']>;
  description: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
  main: Maybe<Scalars['String']>;
  license: Maybe<Scalars['String']>;
  dependencies: Maybe<Array<Maybe<SitePluginPackageJsonDependencies>>>;
  devDependencies: Maybe<Array<Maybe<SitePluginPackageJsonDevDependencies>>>;
  peerDependencies: Maybe<Array<Maybe<SitePluginPackageJsonPeerDependencies>>>;
  keywords: Maybe<Array<Maybe<Scalars['String']>>>;
};

type SitePluginPackageJsonDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SitePluginPackageJsonDevDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SitePluginPackageJsonPeerDependencies = {
  name: Maybe<Scalars['String']>;
  version: Maybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  id: Scalars['ID'];
  parent: Maybe<Node>;
  children: Array<Node>;
  internal: Internal;
  buildTime: Maybe<Scalars['Date']>;
};


type SiteBuildMetadataBuildTimeArgs = {
  formatString: Maybe<Scalars['String']>;
  fromNow: Maybe<Scalars['Boolean']>;
  difference: Maybe<Scalars['String']>;
  locale: Maybe<Scalars['String']>;
};